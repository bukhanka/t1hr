/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
 */

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testEmbeddingSystem() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...\n')

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await prisma.$queryRaw`
      SELECT 
        COUNT(*) as total_profiles,
        COUNT(embedding) as profiles_with_embeddings,
        COUNT("embeddingText") as profiles_with_text
      FROM "Profile" p
      JOIN "User" u ON p."userId" = u.id
      WHERE u.role = 'EMPLOYEE'
    `
    
    const stat = stats[0]
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π:')
    console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${stat.total_profiles}`)
    console.log(`   –° —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: ${stat.profiles_with_embeddings}`)
    console.log(`   –° —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: ${stat.profiles_with_text}`)
    
    const coverage = Number(stat.total_profiles) > 0 
      ? Math.round((Number(stat.profiles_with_embeddings) / Number(stat.total_profiles)) * 100)
      : 0
    console.log(`   –ü–æ–∫—Ä—ã—Ç–∏–µ: ${coverage}%\n`)

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞...')
    
    const testProfiles = await prisma.$queryRaw`
      SELECT p.id
      FROM "Profile" p
      JOIN "User" u ON p."userId" = u.id
      WHERE u.role = 'EMPLOYEE' AND p.embedding IS NULL
      LIMIT 1
    `
    
    const testProfile = testProfiles[0]

    if (testProfile) {
      console.log(`   –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: ${testProfile.id}`)
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
      const testEmbedding = Array.from({ length: 1024 }, () => Math.random() - 0.5)
      
      await prisma.$executeRaw`
        UPDATE "Profile" 
        SET embedding = ${`[${testEmbedding.join(',')}]`}::vector,
            "embeddingText" = '–¢–µ—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
            "updatedAt" = NOW()
        WHERE id = ${testProfile.id}
      `
      
      console.log('   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω')
      
      // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
      console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫...')
      
      const queryEmbedding = Array.from({ length: 1024 }, () => Math.random() - 0.5)
      
      const searchResults = await prisma.$queryRaw`
        SELECT 
          id,
          (1 - (embedding <=> ${`[${queryEmbedding.join(',')}]`}::vector))::float as similarity
        FROM "Profile"
        WHERE embedding IS NOT NULL
        ORDER BY embedding <=> ${`[${queryEmbedding.join(',')}]`}::vector ASC
        LIMIT 3
      `
      
      console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${searchResults.length}`)
      searchResults.forEach((result, i) => {
        console.log(`   ${i + 1}. –ü—Ä–æ—Ñ–∏–ª—å ${result.id}: similarity = ${result.similarity.toFixed(4)}`)
      })
      
    } else {
      console.log('   ‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('\nüìà –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã...')
    
    const indexes = await prisma.$queryRaw`
      SELECT indexname, tablename 
      FROM pg_indexes 
      WHERE indexdef LIKE '%vector%' AND tablename = 'Profile'
    `
    
    if (indexes.length > 0) {
      console.log('   ‚úÖ –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞–π–¥–µ–Ω—ã:')
      indexes.forEach(idx => {
        console.log(`   - ${idx.indexname}`)
      })
    } else {
      console.log('   ‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    console.log('\nüí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ:')
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev')
    console.log('   2. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ HR: ekaterina.hr@company.com')
    console.log('   3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ HR –ø–∞–Ω–µ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"')
    console.log('   4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ —Ç–∞–ª–∞–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testEmbeddingSystem()
