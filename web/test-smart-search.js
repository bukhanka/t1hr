/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞
 */

const { PrismaClient } = require('@prisma/client')
const { VectorizationService } = require('./dist/src/lib/vectorization.js')

const prisma = new PrismaClient()

async function testSmartSearch() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞...\n')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    const totalProfiles = await prisma.profile.count({
      where: { user: { role: 'EMPLOYEE' } }
    })
    
    const withEmbeddings = await prisma.profile.count({
      where: { 
        user: { role: 'EMPLOYEE' },
        embedding: { not: null }
      }
    })

    console.log(`üìä –°—Ç–∞—Ç—É—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:`)
    console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${totalProfiles}`)
    console.log(`   –° —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: ${withEmbeddings}`)
    console.log(`   –ü–æ–∫—Ä—ã—Ç–∏–µ: ${Math.round((withEmbeddings/totalProfiles)*100)}%\n`)

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –ø—Ä–æ—Ñ–∏–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (withEmbeddings === 0) {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –¥–µ–º–æ...')
      
      const profiles = await prisma.profile.findMany({
        where: { 
          user: { role: 'EMPLOYEE' },
          embedding: null
        },
        take: 5
      })

      for (const profile of profiles) {
        console.log(`   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å ${profile.id}...`)
        await VectorizationService.updateProfileEmbedding(profile.id)
        await new Promise(resolve => setTimeout(resolve, 1000)) // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      }
      
      console.log('‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!\n')
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫...')
    
    const searchQueries = [
      'JavaScript React —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
      'Python –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
      '–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤'
    ]

    for (const query of searchQueries) {
      console.log(`\n   –ó–∞–ø—Ä–æ—Å: "${query}"`)
      
      const results = await VectorizationService.semanticSearch(query, 3, 0.1)
      
      if (results && results.length > 0) {
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:`)
        results.forEach((result, i) => {
          console.log(`      ${i+1}. ${result.profile?.user?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (similarity: ${result.similarity.toFixed(3)})`)
        })
      } else {
        console.log('   ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      }
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSmartSearch()
