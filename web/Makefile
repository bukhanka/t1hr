# SciBox Talent Management System - Docker Management

.PHONY: help dev-up dev-down prod-up prod-down db-up db-down logs clean build check-docker

# Detect Docker Compose command (docker-compose vs docker compose)
DOCKER_COMPOSE := $(shell docker compose version > /dev/null 2>&1 && echo "docker compose" || echo "docker-compose")

# Check if running on Windows (Git Bash/WSL detection)
ifeq ($(OS),Windows_NT)
    DETECTED_OS := Windows
else
    DETECTED_OS := $(shell uname -s)
endif

# Default target
help:
	@echo "SciBox Talent Management System"
	@echo "Detected OS: $(DETECTED_OS)"
	@echo "Docker Compose: $(DOCKER_COMPOSE)"
	@echo ""
	@echo "Available commands:"
	@echo "  setup         - Initial setup (first time)"
	@echo ""
	@echo "Development:"
	@echo "  dev-up        - Start development environment"
	@echo "  dev-down      - Stop development environment" 
	@echo "  db-up         - Start only database services"
	@echo "  db-down       - Stop database services"
	@echo ""
	@echo "Production:"
	@echo "  prod-build    - Build production Docker image"
	@echo "  prod-up       - Start production environment"
	@echo "  prod-down     - Stop production environment"
	@echo "  build-local   - Build for local production"
	@echo "  start-local   - Start local production server"
	@echo ""
	@echo "Utilities:"
	@echo "  logs          - Show application logs"
	@echo "  db-migrate    - Run database migrations"
	@echo "  clean         - Remove all containers and volumes"

# Check Docker availability
check-docker:
	@docker --version > /dev/null 2>&1 || { echo "‚ùå Docker is not installed or not running"; exit 1; }
	@$(DOCKER_COMPOSE) version > /dev/null 2>&1 || { echo "‚ùå Docker Compose is not available"; exit 1; }
	@echo "‚úÖ Docker and Docker Compose are available"

# Development commands
dev-up: check-docker
	@echo "Starting development environment..."
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.dev.yml up -d
	@echo "‚úÖ Application available at http://localhost:3000"

dev-down: check-docker
	@echo "Stopping development environment..."
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.dev.yml down

# Database only commands
db-up: check-docker
	@echo "Starting database services..."
	$(DOCKER_COMPOSE) up -d postgres redis

db-down: check-docker
	@echo "Stopping database services..."
	$(DOCKER_COMPOSE) stop postgres redis

# Production commands
prod-build: check-docker
	@echo "Building production Docker image..."
	@if [ ! -f .env ]; then \
		echo "üìù Creating .env for production build..."; \
		cp env.example .env; \
		echo "‚ö†Ô∏è  Make sure to set SCIBOX_API_KEY in .env"; \
	fi
	docker build -t scibox-talent:latest .

prod-up: check-docker
	@echo "Starting production environment..."
	$(DOCKER_COMPOSE) up -d

prod-down: check-docker
	@echo "Stopping production environment..."
	$(DOCKER_COMPOSE) down

# Local production build and start
build-local:
	@echo "Building application for local production..."
	@if [ ! -f .env ]; then \
		echo "üìù Creating .env for build..."; \
		cp env.example .env; \
	fi
	@echo "üßπ Cleaning previous build..."
	sudo rm -rf .next 2>/dev/null || docker run --rm -v $(PWD):/app alpine sh -c "rm -rf /app/.next" || true
	@echo "üî® Building production..."
	NODE_ENV=production npm run build

start-local: build-local
	@echo "Starting local production server..."
	npm start

# Utility commands
logs: check-docker
	$(DOCKER_COMPOSE) logs -f app

logs-db: check-docker
	$(DOCKER_COMPOSE) logs -f postgres

db-migrate: check-docker
	@echo "Running database migrations..."
	$(DOCKER_COMPOSE) exec app npx prisma migrate deploy

db-seed: check-docker
	@echo "Seeding database..."
	$(DOCKER_COMPOSE) exec app npx prisma db seed

db-reset: check-docker
	@echo "Resetting database..."
	$(DOCKER_COMPOSE) exec app npx prisma migrate reset --force

# Cleanup commands
clean: check-docker
	@echo "Removing all containers and volumes..."
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.dev.yml down -v --remove-orphans
	docker system prune -f

# Quick setup for new developers
setup: check-docker
	@echo "Setting up development environment..."
	@echo "Detected OS: $(DETECTED_OS)"
	@echo "Using Docker Compose: $(DOCKER_COMPOSE)"
	@echo ""
	@if [ ! -f .env.local ]; then \
		echo "üìù Creating .env.local from template..."; \
		cp env.example .env.local; \
		echo "‚ö†Ô∏è  Please edit .env.local with your SciBox API key"; \
	else \
		echo "‚úÖ .env.local already exists"; \
	fi
	@if [ ! -f .env ]; then \
		echo "üìù Creating .env for Prisma..."; \
		cp env.example .env; \
		echo "‚úÖ .env created for Prisma CLI"; \
	else \
		echo "‚úÖ .env already exists"; \
	fi
	@echo "üì¶ Installing dependencies..."
	npm install
	@echo "üê≥ Starting database services..."
	make db-up
	@echo "‚è≥ Waiting for database to be ready..."
	sleep 10
	@echo "üîß Running database migrations..."
	npx prisma migrate dev --name init
	npx prisma generate
	@echo "‚úÖ Setup complete! Run 'make dev-up' to start development."
