/**
 * –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ pgvector –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function setupPgVector() {
  try {
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º pgvector...')

    // 0. –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector
    await prisma.$executeRaw`CREATE EXTENSION IF NOT EXISTS vector`
    console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector –≤–∫–ª—é—á–µ–Ω–æ')

    // 1. –î–æ–±–∞–≤–ª—è–µ–º vector –∫–æ–ª–æ–Ω–∫—É
    await prisma.$executeRaw`
      ALTER TABLE "Profile" 
      ADD COLUMN IF NOT EXISTS embedding vector(1024)
    `
    console.log('‚úÖ Vector –∫–æ–ª–æ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')

    // 2. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    await prisma.$executeRaw`
      CREATE INDEX IF NOT EXISTS profile_embedding_cosine_idx 
      ON "Profile" USING hnsw (embedding vector_cosine_ops) 
      WITH (m = 16, ef_construction = 64)
    `
    console.log('‚úÖ HNSW –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω')

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await prisma.$queryRaw`
      SELECT 
        COUNT(*) as total_profiles,
        COUNT(embedding) as profiles_with_embeddings
      FROM "Profile" p
      JOIN "User" u ON p."userId" = u.id
      WHERE u.role = 'EMPLOYEE'
    `
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π:', stats[0])
    console.log('üöÄ pgvector –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ pgvector:', error)
  } finally {
    await prisma.$disconnect()
  }
}

setupPgVector()
