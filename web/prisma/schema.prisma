generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          Role      @default(EMPLOYEE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  profile       Profile?
  sessions      Session[]
  reviewedRotationApplications RotationApplication[] @relation("RotationApplicationReviewer")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id                    String                 @id @default(cuid())
  userId                String                 @unique
  jobTitle              String?
  department            String?
  rotationStatus        RotationStatus         @default(STABLE)
  reportsToId           String?
  xp                    Int                    @default(0)
  level                 Int                    @default(1)
  profileStrength       Int                    @default(0)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  tCoins                Int                    @default(100)
  totalEarned           Int                    @default(0)
  onboardingCompleted   Boolean                @default(false)
  onboardingCompletedAt DateTime?
  embeddingText         String?
  // embedding будет добавлен через post-migration.sql как vector(1024)
  // Prisma не может напрямую работать с pgvector типами
  careerGoals           CareerGoal[]
  chatSessions          ChatSession[]
  createdCommunities    Community[]            @relation("CommunityCreator")
  communityMemberships  CommunityMember[]
  communityPosts        CommunityPost[]
  postComments          CommunityPostComment[]
  postLikes             CommunityPostLike[]
  user                  User                   @relation(fields: [userId], references: [id])
  shortListEntries      ShortListCandidate[]
  tcoinTransactions     TCoinTransaction[]
  badges                UserBadge[]
  userCourses           UserCourse[]
  mentorPrograms        UserMentorProgram[]
  userProjects          UserProject[]
  userSkills            UserSkill[]
  managedProjects       Project[]             @relation("ProjectManager")
  awardedTransactions   TCoinTransaction[]    @relation("TCoinAwarder")
  tcoinPermissions      TCoinAwardPermission[] @relation("ManagerPermissions")
  rotationApplication   RotationApplication?
}

model Skill {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  category    String?
  createdAt   DateTime    @default(now())
  userSkills  UserSkill[]
}

model UserSkill {
  id         String      @id @default(cuid())
  profileId  String
  skillId    String
  level      Int
  isVerified Boolean     @default(false)
  status     SkillStatus @default(USING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  profile    Profile     @relation(fields: [profileId], references: [id])
  skill      Skill       @relation(fields: [skillId], references: [id])

  @@unique([profileId, skillId])
}

model Project {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String?
  status       ProjectStatus @default(ACTIVE)
  managerId    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  manager           Profile?               @relation("ProjectManager", fields: [managerId], references: [id])
  userProjects      UserProject[]
  tcoinTransactions TCoinTransaction[]
  awardPermissions  TCoinAwardPermission[]
}

model UserProject {
  id            String    @id @default(cuid())
  profileId     String
  projectId     String
  roleInProject String
  achievements  String?
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile   @relation(fields: [profileId], references: [id])
  project       Project   @relation(fields: [projectId], references: [id])

  @@unique([profileId, projectId])
}

model Badge {
  id           String      @id @default(cuid())
  name         String      @unique
  description  String
  iconUrl      String?
  xpReward     Int         @default(0)
  createdAt    DateTime    @default(now())
  awardedUsers UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  profileId String
  badgeId   String
  awardedAt DateTime @default(now())
  badge     Badge    @relation(fields: [badgeId], references: [id])
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@unique([profileId, badgeId])
}

model CareerGoal {
  id        String   @id @default(cuid())
  profileId String
  goalType  String
  target    String
  priority  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [id])
}

model ChatSession {
  id        String        @id @default(cuid())
  profileId String
  title     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
  profile   Profile       @relation(fields: [profileId], references: [id])
}

model ChatMessage {
  id        String      @id @default(cuid())
  sessionId String
  role      MessageRole
  content   String
  createdAt DateTime    @default(now())
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model ShortList {
  id          String               @id @default(cuid())
  managerId   String
  title       String
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  candidates  ShortListCandidate[]
}

model ShortListCandidate {
  id          String    @id @default(cuid())
  shortListId String
  profileId   String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  profile     Profile   @relation(fields: [profileId], references: [id])
  shortList   ShortList @relation(fields: [shortListId], references: [id], onDelete: Cascade)

  @@unique([shortListId, profileId])
}

model JobOpening {
  id           String    @id @default(cuid())
  title        String
  description  String
  department   String
  requirements String[]
  level        String
  status       JobStatus @default(OPEN)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String
  category    String
  level       String
  duration    Int?
  format      String
  skills      String[]
  status      CourseStatus @default(ACTIVE)
  xpReward    Int          @default(50)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userCourses UserCourse[]
}

model UserCourse {
  id          String         @id @default(cuid())
  profileId   String
  courseId    String
  status      LearningStatus @default(PLANNED)
  startDate   DateTime?
  completedAt DateTime?
  xpAwarded   Int            @default(0)
  progress    Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  course      Course         @relation(fields: [courseId], references: [id])
  profile     Profile        @relation(fields: [profileId], references: [id])

  @@unique([profileId, courseId])
}

model MentorProgram {
  id           String              @id @default(cuid())
  title        String
  description  String
  skills       String[]
  mentorId     String
  maxSlots     Int                 @default(3)
  status       String              @default("ACTIVE")
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  participants UserMentorProgram[]
}

model UserMentorProgram {
  id        String        @id @default(cuid())
  profileId String
  programId String
  role      MentorRole
  status    String        @default("ACTIVE")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  profile   Profile       @relation(fields: [profileId], references: [id])
  program   MentorProgram @relation(fields: [programId], references: [id])

  @@unique([profileId, programId])
}

model TCoinTransaction {
  id            String   @id @default(cuid())
  profileId     String
  amount        Int
  type          String
  source        String
  description   String
  metadata      Json?
  awardedById   String?  // ID профиля, который начислил коины
  projectId     String?  // ID проекта, в рамках которого начислены коины
  createdAt     DateTime @default(now())
  profile       Profile  @relation(fields: [profileId], references: [id])
  awardedBy     Profile? @relation("TCoinAwarder", fields: [awardedById], references: [id])
  project       Project? @relation(fields: [projectId], references: [id])
}

model TCoinAwardPermission {
  id          String   @id @default(cuid())
  managerId   String   // ID менеджера, который может начислять коины
  projectId   String?  // ID проекта (если null, то может начислять в любых проектах)
  maxAmount   Int      @default(100) // Максимальная сумма единовременного начисления
  dailyLimit  Int      @default(500) // Дневной лимит начислений
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  manager     Profile  @relation("ManagerPermissions", fields: [managerId], references: [id])
  project     Project? @relation(fields: [projectId], references: [id])

  @@unique([managerId, projectId])
}

model RewardItem {
  id          String   @id @default(cuid())
  name        String
  description String
  cost        Int
  category    String
  imageUrl    String?
  inStock     Boolean  @default(true)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Leaderboard {
  id          String    @id @default(cuid())
  type        String
  period      String
  data        Json
  generatedAt DateTime  @default(now())
  validUntil  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Community {
  id          String            @id @default(cuid())
  name        String
  description String
  type        String
  tags        String[]
  privacy     String            @default("PUBLIC")
  imageUrl    String?
  creatorId   String
  memberCount Int               @default(0)
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  creator     Profile           @relation("CommunityCreator", fields: [creatorId], references: [id])
  members     CommunityMember[]
  posts       CommunityPost[]
}

model CommunityMember {
  id          String    @id @default(cuid())
  communityId String
  profileId   String
  role        String    @default("MEMBER")
  joinedAt    DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  profile     Profile   @relation(fields: [profileId], references: [id])

  @@unique([communityId, profileId])
}

model CommunityPost {
  id            String                 @id @default(cuid())
  communityId   String
  authorId      String
  title         String?
  content       String
  type          String                 @default("TEXT")
  likesCount    Int                    @default(0)
  commentsCount Int                    @default(0)
  isPinned      Boolean                @default(false)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  author        Profile                @relation(fields: [authorId], references: [id])
  community     Community              @relation(fields: [communityId], references: [id], onDelete: Cascade)
  comments      CommunityPostComment[]
  likes         CommunityPostLike[]
}

model CommunityPostLike {
  id        String        @id @default(cuid())
  postId    String
  profileId String
  createdAt DateTime      @default(now())
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile   Profile       @relation(fields: [profileId], references: [id])

  @@unique([postId, profileId])
}

model CommunityPostComment {
  id        String        @id @default(cuid())
  postId    String
  authorId  String
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  author    Profile       @relation(fields: [authorId], references: [id])
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum Role {
  EMPLOYEE
  MANAGER
  HR
  PROJECT_MANAGER
}

enum SkillStatus {
  USING
  WANTS_TO_LEARN
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum MessageRole {
  USER
  ASSISTANT
}

enum JobStatus {
  OPEN
  CLOSED
  DRAFT
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  COMING_SOON
}

enum LearningStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  DROPPED
}

enum MentorRole {
  MENTOR
  MENTEE
}

enum RotationStatus {
  ROTATION    // Сотрудник в ротации - может видеть проекты/вакансии
  STABLE      // Стабильная позиция - не показываем проекты/вакансии
}

model RotationApplication {
  id          String            @id @default(cuid())
  profileId   String
  status      ApplicationStatus @default(PENDING)
  reason      String?           // Причина подачи заявки
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  reviewedAt  DateTime?
  reviewedBy  String?           // ID HR менеджера, который рассмотрел заявку
  notes       String?           // Комментарии HR
  
  profile     Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)
  reviewer    User?             @relation("RotationApplicationReviewer", fields: [reviewedBy], references: [id])
  
  @@unique([profileId]) // Один сотрудник может иметь только одну активную заявку
}

enum ApplicationStatus {
  PENDING     // Заявка подана, ожидает рассмотрения
  APPROVED    // Заявка одобрена
  REJECTED    // Заявка отклонена
  WITHDRAWN   // Заявка отозвана сотрудником
}
