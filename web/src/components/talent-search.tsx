"use client"

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Avatar, AvatarFallback } from '@/components/ui/avatar'
import { 
  Search,
  Filter,
  CheckCircle,
  Star,
  MessageCircle,
  Bookmark,
  Loader2,
  AlertCircle,
  Users
} from 'lucide-react'

interface TalentSearchResult {
  id: string
  name: string
  jobTitle: string
  department: string
  profileStrength: number
  level: number
  xp: number
  matchPercentage: number
  semanticSimilarity: number
  skills: Array<{
    name: string
    level: number
    isVerified: boolean
  }>
  recentProjects: Array<{
    name: string
    role: string
    achievements: string
  }>
  availability: string
}

interface SearchFilters {
  skills: string[]
  departments: string[]
  levels: string[]
  availability: 'available' | 'busy' | 'any'
}

export function TalentSearch() {
  const [query, setQuery] = useState('')
  const [results, setResults] = useState<TalentSearchResult[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [isInitializing, setIsInitializing] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [embeddingStatus, setEmbeddingStatus] = useState<{
    profilesWithEmbeddings: number
    totalProfiles: number
    coveragePercentage: number
    readyForSemanticSearch: boolean
  } | null>(null)

  const [filters, setFilters] = useState<SearchFilters>({
    skills: [],
    departments: [],
    levels: [],
    availability: 'any'
  })

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    checkEmbeddingStatus()
  }, [])

  const checkEmbeddingStatus = async () => {
    try {
      const response = await fetch('/api/admin/init-embeddings')
      if (response.ok) {
        const status = await response.json()
        setEmbeddingStatus(status)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:', error)
    }
  }

  const initializeEmbeddings = async () => {
    setIsInitializing(true)
    try {
      const response = await fetch('/api/admin/init-embeddings', {
        method: 'POST'
      })

      if (response.ok) {
        alert('–ü—Ä–æ—Ü–µ—Å—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω! –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.')
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        const interval = setInterval(async () => {
          await checkEmbeddingStatus()
          if (embeddingStatus && embeddingStatus.coveragePercentage >= 80) {
            clearInterval(interval)
            setIsInitializing(false)
          }
        }, 10000)
      } else {
        const error = await response.json()
        setError(error.error)
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤')
      console.error(error)
    } finally {
      setIsInitializing(false)
    }
  }

  const searchTalents = async () => {
    if (!query.trim()) return

    setIsLoading(true)
    setError(null)
    
    try {
      const response = await fetch('/api/search/talents', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query: query.trim(),
          filters: filters
        })
      })

      if (response.ok) {
        const data = await response.json()
        setResults(data.results)
      } else {
        const error = await response.json()
        setError(error.error)
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞')
      console.error(error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      searchTalents()
    }
  }

  const getAvailabilityColor = (availability: string) => {
    switch (availability) {
      case 'available': return 'text-green-600'
      case 'busy': return 'text-orange-600'
      default: return 'text-gray-600'
    }
  }

  const getAvailabilityIcon = (availability: string) => {
    switch (availability) {
      case 'available': return CheckCircle
      case 'busy': return Star
      default: return AlertCircle
    }
  }

  const getMatchColor = (percentage: number) => {
    if (percentage >= 80) return 'bg-green-100 text-green-800'
    if (percentage >= 60) return 'bg-yellow-100 text-yellow-800'
    return 'bg-blue-100 text-blue-800'
  }

  return (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç—É—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ */}
      {embeddingStatus && !embeddingStatus.readyForSemanticSearch && (
        <Card className="border-orange-200 bg-orange-50">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-medium text-orange-900">
                  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                </h3>
                <p className="text-sm text-orange-700 mt-1">
                  –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è {embeddingStatus.profilesWithEmbeddings} –∏–∑ {embeddingStatus.totalProfiles} –ø—Ä–æ—Ñ–∏–ª–µ–π 
                  ({embeddingStatus.coveragePercentage}%). –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏.
                </p>
              </div>
              <Button 
                onClick={initializeEmbeddings}
                disabled={isInitializing}
                size="sm"
              >
                {isInitializing ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : null}
                {isInitializing ? '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...' : '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'}
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">–£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–∞–ª–∞–Ω—Ç–æ–≤</CardTitle>
          <p className="text-sm text-muted-foreground">
            {embeddingStatus?.readyForSemanticSearch 
              ? "ü§ñ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫"
              : "üìù –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ - –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            }
          </p>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex space-x-2">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù—É–∂–µ–Ω Senior Java —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å –æ–ø—ã—Ç–æ–º –≤ —Ñ–∏–Ω—Ç–µ—Ö–µ, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–ª —Å Kafka"
                  value={query}
                  onChange={(e) => setQuery(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="pl-10"
                />
              </div>
              <Button 
                onClick={searchTalents} 
                disabled={isLoading || !query.trim()}
              >
                {isLoading ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <Search className="mr-2 h-4 w-4" />
                )}
                –ù–∞–π—Ç–∏
              </Button>
            </div>

            {/* –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã */}
            <div className="flex flex-wrap gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setQuery("Senior Backend Developer —Å –æ–ø—ã—Ç–æ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤")
                  setTimeout(searchTalents, 100)
                }}
              >
                Backend Senior
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setQuery("Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ React TypeScript")
                  setTimeout(searchTalents, 100)
                }}
              >
                Frontend React
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setQuery("DevOps –∏–Ω–∂–µ–Ω–µ—Ä —Å –æ–ø—ã—Ç–æ–º Docker Kubernetes")
                  setTimeout(searchTalents, 100)
                }}
              >
                DevOps
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setQuery("Data Scientist Python –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
                  setTimeout(searchTalents, 100)
                }}
              >
                Data Science
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –û—à–∏–±–∫–∞ */}
      {error && (
        <Card className="border-red-200 bg-red-50">
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <AlertCircle className="h-4 w-4 text-red-600" />
              <p className="text-red-900">{error}</p>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
      {results.length > 0 && (
        <div>
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold">
              –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã <span className="text-muted-foreground">({results.length})</span>
            </h2>
          </div>

          <div className="grid gap-4">
            {results.map((candidate) => {
              const AvailabilityIcon = getAvailabilityIcon(candidate.availability)
              
              return (
                <Card key={candidate.id} className="hover:shadow-lg transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between">
                      <div className="flex space-x-4 flex-1">
                        <Avatar className="h-12 w-12">
                          <AvatarFallback>
                            {candidate.name.split(' ').map(n => n[0]).join('')}
                          </AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-1">
                            <h3 className="font-semibold">{candidate.name}</h3>
                            <Badge className={getMatchColor(candidate.matchPercentage)}>
                              {candidate.matchPercentage}% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                            </Badge>
                            {candidate.semanticSimilarity && (
                              <Badge variant="outline" className="text-xs">
                                –°–µ–º–∞–Ω—Ç–∏–∫–∞: {Math.round(candidate.semanticSimilarity * 100)}%
                              </Badge>
                            )}
                          </div>
                          <p className="text-muted-foreground text-sm mb-2">
                            {candidate.jobTitle} ‚Ä¢ {candidate.department} ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å {candidate.level}
                          </p>
                          <div className="flex flex-wrap gap-1 mb-3">
                            {candidate.skills.slice(0, 5).map((skill, idx) => (
                              <Badge key={idx} variant={skill.isVerified ? "default" : "secondary"} className="text-xs">
                                {skill.name}
                                {skill.isVerified && " ‚úì"}
                              </Badge>
                            ))}
                            {candidate.skills.length > 5 && (
                              <Badge variant="outline" className="text-xs">
                                +{candidate.skills.length - 5} –µ—â–µ
                              </Badge>
                            )}
                          </div>
                          {candidate.recentProjects.length > 0 && (
                            <div className="text-sm text-gray-700 mb-2">
                              <strong>–ù–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:</strong>
                              {candidate.recentProjects.slice(0, 2).map((project, idx) => (
                                <div key={idx} className="ml-2">
                                  ‚Ä¢ {project.name} ({project.role})
                                </div>
                              ))}
                            </div>
                          )}
                          <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                            <div className="flex items-center space-x-1">
                              <AvailabilityIcon className={`h-4 w-4 ${getAvailabilityColor(candidate.availability)}`} />
                              <span>
                                {candidate.availability === 'available' ? '–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á' :
                                 candidate.availability === 'busy' ? '–ó–∞–Ω—è—Ç –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ' :
                                 '–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
                              </span>
                            </div>
                            <span>–°–∏–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è: {candidate.profileStrength}%</span>
                          </div>
                        </div>
                      </div>
                      <div className="flex flex-col space-y-2 ml-4">
                        <Button size="sm">
                          <Bookmark className="mr-2 h-4 w-4" />
                          –í —à–æ—Ä—Ç-–ª–∏—Å—Ç
                        </Button>
                        <Button size="sm" variant="outline">
                          <Users className="mr-2 h-4 w-4" />
                          –ü—Ä–æ—Ñ–∏–ª—å
                        </Button>
                        <Button size="sm" variant="outline">
                          <MessageCircle className="mr-2 h-4 w-4" />
                          –°–≤—è–∑–∞—Ç—å—Å—è
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )
            })}
          </div>
        </div>
      )}

      {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      {!isLoading && results.length === 0 && query && (
        <Card>
          <CardContent className="p-8 text-center">
            <Search className="mx-auto h-12 w-12 text-gray-400 mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </h3>
            <p className="text-gray-600 mb-4">
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            </p>
            <Button variant="outline" onClick={() => setQuery('')}>
              –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫
            </Button>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
