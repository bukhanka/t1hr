"use client"

import { useState, useRef, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Input } from '@/components/ui/input'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Send, Loader2, Bot, History } from 'lucide-react'
import { useSession } from 'next-auth/react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'

interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
}

interface ChatSession {
  id: string
  title: string
  createdAt: string
  messageCount: number
}

interface NavigatorModalProps {
  isOpen: boolean
  onOpenChange: (open: boolean) => void
  triggerSource?: string // –û—Ç–∫—É–¥–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω –ù–∞–≤–∏–≥–∞—Ç–æ—Ä
}

export function NavigatorModal({ isOpen, onOpenChange, triggerSource }: NavigatorModalProps) {
  const { data: session } = useSession()
  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null)
  const [chatSessions, setChatSessions] = useState<ChatSession[]>([])
  const [showHistory, setShowHistory] = useState(false)
  const [isLoadingHistory, setIsLoadingHistory] = useState(false)
  const [isInitialized, setIsInitialized] = useState(false)
  
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (isOpen && !isInitialized) {
      initializeChat()
      setIsInitialized(true)
    }
  }, [isOpen, isInitialized])

  const initializeChat = async () => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
    await loadChatSessions()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –≤ localStorage
    const savedSessionId = localStorage.getItem('navigator_session_id')
    if (savedSessionId) {
      await loadChatSession(savedSessionId)
    } else {
      // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      startWelcomeChat()
    }
  }

  const loadChatSessions = async () => {
    try {
      const response = await fetch('/api/ai/chat/sessions')
      if (response.ok) {
        const sessions = await response.json()
        setChatSessions(sessions.slice(0, 5)) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ—Å—Å–∏–π
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π:', error)
    }
  }

  const loadChatSession = async (sessionId: string) => {
    setIsLoadingHistory(true)
    try {
      const response = await fetch(`/api/ai/chat/sessions/${sessionId}`)
      if (response.ok) {
        const session = await response.json()
        
        const loadedMessages: Message[] = session.messages.map((msg: any) => ({
          id: msg.id,
          role: msg.role.toLowerCase() as 'user' | 'assistant',
          content: msg.content,
          timestamp: new Date(msg.createdAt)
        }))
        
        setMessages(loadedMessages)
        setCurrentSessionId(sessionId)
        localStorage.setItem('navigator_session_id', sessionId)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:', error)
    } finally {
      setIsLoadingHistory(false)
    }
  }

  const startWelcomeChat = () => {
    const welcomeMessage = getContextualWelcome()
    
    setMessages([{
      id: '1',
      role: 'assistant',
      content: welcomeMessage,
      timestamp: new Date()
    }])
    setCurrentSessionId(null)
  }

  const getContextualWelcome = () => {
    const name = session?.user?.name ? session.user.name.split(' ')[0] : ''
    const greeting = `–ü—Ä–∏–≤–µ—Ç${name ? `, ${name}` : ''}!`
    
    const contextMessages = {
      'profile': '–ú–æ–≥—É –ø–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.',
      'dashboard': '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∫–∞—Ä—å–µ—Ä–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º.',
      'projects': '–ú–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã.',
      default: '–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.'
    }

    const contextMessage = contextMessages[triggerSource as keyof typeof contextMessages] || contextMessages.default

    return `${greeting} –Ø –ù–∞–≤–∏–≥–∞—Ç–æ—Ä - –≤–∞—à –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ.

${contextMessage}

–û —á–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?`
  }

  const sendMessage = async () => {
    if (!input.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input.trim(),
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInput('')
    setIsLoading(true)

    try {
      const requestBody: any = {
        message: userMessage.content,
        context: {
          triggerSource,
          timestamp: new Date().toISOString()
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º sessionId —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ null
      if (currentSessionId) {
        requestBody.sessionId = currentSessionId
      }
      
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä—É:', requestBody)

      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      })

      console.log('üì° Response status:', response.status, response.statusText)

      if (!response.ok) {
        const errorData = await response.text()
        console.error('‚ùå Response error:', errorData)
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.status} ${response.statusText}`)
      }

      const reader = response.body?.getReader()
      const decoder = new TextDecoder()

      if (reader) {
        let assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: '',
          timestamp: new Date()
        }

        setMessages(prev => [...prev, assistantMessage])

        while (true) {
          const { value, done } = await reader.read()
          if (done) break

          const chunk = decoder.decode(value, { stream: true })
          const lines = chunk.split('\n')

          for (const line of lines) {
            if (line.startsWith('data: ')) {
              try {
                const data = JSON.parse(line.slice(6))
                
                if (data.content) {
                  assistantMessage.content += data.content
                  setMessages(prev => prev.map(msg => 
                    msg.id === assistantMessage.id 
                      ? { ...msg, content: assistantMessage.content }
                      : msg
                  ))
                }

                if (data.done && data.sessionId) {
                  setCurrentSessionId(data.sessionId)
                  localStorage.setItem('navigator_session_id', data.sessionId)
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
                  await loadChatSessions()
                }

                if (data.error) {
                  console.error('–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data.error)
                }
              } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
              }
            }
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      setMessages(prev => [...prev, {
        id: (Date.now() + 2).toString(),
        role: 'assistant',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: new Date()
      }])
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  const startNewChat = () => {
    setMessages([])
    setCurrentSessionId(null)
    localStorage.removeItem('navigator_session_id')
    setShowHistory(false)
    startWelcomeChat()
  }

  const quickActions = [
    {
      label: '–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã',
      query: '–ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —Å–µ–π—á–∞—Å –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –º–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ —Ü–µ–ª–µ–π —Ä–∞–∑–≤–∏—Ç–∏—è?',
      icon: 'üéØ'
    },
    {
      label: '–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
      query: '–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ XP –∏ –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Å–≤–æ–∏–º –Ω–∞–≤—ã–∫–∞–º?',
      icon: 'üìà'
    },
    {
      label: '–ü–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è',
      query: '–°–æ—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –ø–æ–ª–≥–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –º–æ–∏—Ö —Ü–µ–ª–µ–π',
      icon: 'üó∫Ô∏è'
    },
    {
      label: '–ö–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
      query: '–ö–∞–∫–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Å –º–æ–∏–º–∏ —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏?',
      icon: 'üöÄ'
    }
  ]

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-5xl max-h-[85vh] p-0">
        <DialogHeader className="p-4 pb-0 border-b">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Bot className="h-5 w-5 text-blue-600" />
              <DialogTitle className="text-base font-medium">
                –ù–∞–≤–∏–≥–∞—Ç–æ—Ä
              </DialogTitle>
            </div>
            
            <div className="flex items-center space-x-2">
              <Button 
                variant="ghost" 
                size="sm"
                onClick={() => setShowHistory(!showHistory)}
                className="text-xs"
              >
                <History className="w-4 h-4 mr-1" />
                –ò—Å—Ç–æ—Ä–∏—è
              </Button>
              <Button 
                variant="ghost" 
                size="sm"
                onClick={startNewChat}
                className="text-xs"
              >
                –ù–æ–≤—ã–π —á–∞—Ç
              </Button>
              <Button 
                variant="ghost" 
                size="sm"
                onClick={() => {
                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                  if (currentSessionId) {
                    localStorage.setItem('navigator_session_id', currentSessionId)
                  }
                  onOpenChange(false) // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                  window.open('/chat', '_blank') // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                }}
                className="text-xs"
                title="–û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ–ª–Ω–æ–º —ç–∫—Ä–∞–Ω–µ"
              >
                ‚õ∂
              </Button>
            </div>
          </div>
        </DialogHeader>

        <div className="flex flex-1 overflow-hidden">
          {/* Sidebar —Å –∏—Å—Ç–æ—Ä–∏–µ–π */}
          {showHistory && (
            <div className="w-56 border-r bg-gray-50/50 p-3">
              <h3 className="text-sm font-medium mb-2 text-gray-600">–ù–µ–¥–∞–≤–Ω–∏–µ —á–∞—Ç—ã</h3>
              <div className="space-y-1">
                {chatSessions.map((session) => (
                  <button
                    key={session.id}
                    onClick={() => loadChatSession(session.id)}
                    className={`w-full text-left p-2 rounded text-xs hover:bg-gray-100 transition-colors ${
                      currentSessionId === session.id ? 'bg-blue-50 border border-blue-200' : 'bg-white'
                    }`}
                  >
                    <div className="font-medium truncate">{session.title}</div>
                    <div className="text-xs text-gray-500 mt-1">
                      {session.messageCount} —Å–æ–æ–±—â.
                    </div>
                  </button>
                ))}
                {chatSessions.length === 0 && (
                  <div className="text-xs text-gray-500 text-center py-3">
                    –ù–µ—Ç —á–∞—Ç–æ–≤
                  </div>
                )}
              </div>
            </div>
          )}

          {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
          <div className="flex-1 flex flex-col">
            {isLoadingHistory ? (
              <div className="flex-1 flex items-center justify-center">
                <div className="text-center">
                  <Loader2 className="h-8 w-8 animate-spin mx-auto mb-2" />
                  <p className="text-muted-foreground">–ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞...</p>
                </div>
              </div>
            ) : (
              <>
                <div className="flex-1 overflow-y-auto p-4">
                  <div className="space-y-3">
                    {messages.map((message) => (
                      <div
                        key={message.id}
                        className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                      >
                        <div
                          className={`max-w-[75%] rounded-lg px-3 py-2 ${
                            message.role === 'user'
                              ? 'bg-blue-600 text-white'
                              : 'bg-gray-100 text-gray-900 border'
                          }`}
                        >
                          {message.role === 'assistant' ? (
                            <div className="text-sm leading-relaxed prose prose-sm max-w-none">
                              <ReactMarkdown 
                                remarkPlugins={[remarkGfm]}
                                components={{
                                  p: ({ children }) => <p className="mb-2 last:mb-0">{children}</p>,
                                  ul: ({ children }) => <ul className="list-disc list-inside mb-2 space-y-1">{children}</ul>,
                                  ol: ({ children }) => <ol className="list-decimal list-inside mb-2 space-y-1">{children}</ol>,
                                  li: ({ children }) => <li className="text-sm">{children}</li>,
                                  strong: ({ children }) => <strong className="font-semibold">{children}</strong>,
                                  em: ({ children }) => <em className="italic">{children}</em>,
                                  code: ({ children }) => <code className="bg-gray-200 px-1 py-0.5 rounded text-xs font-mono">{children}</code>,
                                  pre: ({ children }) => <pre className="bg-gray-200 p-2 rounded text-xs font-mono overflow-x-auto mb-2">{children}</pre>,
                                  blockquote: ({ children }) => <blockquote className="border-l-4 border-gray-300 pl-3 italic mb-2">{children}</blockquote>,
                                  h1: ({ children }) => <h1 className="text-lg font-bold mb-2">{children}</h1>,
                                  h2: ({ children }) => <h2 className="text-base font-bold mb-2">{children}</h2>,
                                  h3: ({ children }) => <h3 className="text-sm font-bold mb-1">{children}</h3>,
                                }}
                              >
                                {message.content}
                              </ReactMarkdown>
                            </div>
                          ) : (
                            <div className="text-sm whitespace-pre-wrap leading-relaxed">
                              {message.content}
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                    
                    {isLoading && (
                      <div className="flex justify-start">
                        <div className="bg-gray-100 border rounded-lg px-3 py-2 max-w-[75%]">
                          <div className="flex items-center space-x-2">
                            <Loader2 className="h-3 w-3 animate-spin" />
                            <span className="text-sm text-gray-600">–ø–µ—á–∞—Ç–∞–µ—Ç...</span>
                          </div>
                        </div>
                      </div>
                    )}
                    <div ref={messagesEndRef} />
                  </div>
                </div>

                {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞ */}
                {messages.length <= 1 && !isLoading && (
                  <div className="px-4 pb-3">
                    <div className="grid grid-cols-2 gap-2">
                      {quickActions.slice(0, 4).map((action) => (
                        <Button
                          key={action.label}
                          variant="outline"
                          size="sm"
                          onClick={() => setInput(action.query)}
                          disabled={isLoading}
                          className="justify-start h-8 text-xs"
                        >
                          <span className="mr-1 text-xs">{action.icon}</span>
                          <span className="truncate">{action.label}</span>
                        </Button>
                      ))}
                    </div>
                  </div>
                )}

                {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ */}
                <div className="flex-shrink-0 border-t p-4 bg-white">
                  <div className="flex space-x-2">
                    <Input
                      placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                      value={input}
                      onChange={(e) => setInput(e.target.value)}
                      onKeyPress={handleKeyPress}
                      disabled={isLoading}
                      className="flex-1"
                    />
                    <Button 
                      onClick={sendMessage} 
                      disabled={isLoading || !input.trim()}
                      size="sm"
                    >
                      {isLoading ? (
                        <Loader2 className="h-4 w-4 animate-spin" />
                      ) : (
                        <Send className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </div>
              </>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}
