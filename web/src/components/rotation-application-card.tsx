"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { useToast } from "@/components/ui/use-toast"
import { 
  RotateCcw, 
  Clock, 
  CheckCircle, 
  XCircle, 
  UserX,
  Calendar,
  MessageSquare
} from "lucide-react"

interface RotationApplication {
  id: string
  status: 'PENDING' | 'APPROVED' | 'REJECTED' | 'WITHDRAWN'
  reason?: string
  createdAt: string
  updatedAt: string
  reviewedAt?: string
  notes?: string
  reviewer?: {
    name: string
    email: string
  }
}

interface RotationApplicationCardProps {
  className?: string
}

export function RotationApplicationCard({ className }: RotationApplicationCardProps) {
  const [application, setApplication] = useState<RotationApplication | null>(null)
  const [currentRotationStatus, setCurrentRotationStatus] = useState<string>('STABLE')
  const [loading, setLoading] = useState(true)
  const [submitting, setSubmitting] = useState(false)
  const [reason, setReason] = useState('')
  const [showReasonForm, setShowReasonForm] = useState(false)
  const { toast } = useToast()

  useEffect(() => {
    fetchApplicationStatus()
  }, [])

  const fetchApplicationStatus = async () => {
    try {
      const response = await fetch('/api/rotation/apply')
      if (response.ok) {
        const data = await response.json()
        setApplication(data.application)
        setCurrentRotationStatus(data.currentRotationStatus)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleSubmitApplication = async () => {
    if (!reason.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏",
        variant: "error"
      })
      return
    }

    setSubmitting(true)
    try {
      const response = await fetch('/api/rotation/apply', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ reason: reason.trim() })
      })

      const data = await response.json()

      if (response.ok) {
        toast({
          title: "–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞",
          description: data.message,
          variant: "success"
        })
        setApplication(data.application)
        setShowReasonForm(false)
        setReason('')
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: data.error,
          variant: "error"
        })
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
        variant: "error"
      })
    } finally {
      setSubmitting(false)
    }
  }

  const handleWithdrawApplication = async () => {
    setSubmitting(true)
    try {
      const response = await fetch('/api/rotation/withdraw', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      })

      const data = await response.json()

      if (response.ok) {
        toast({
          title: "–ó–∞—è–≤–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞",
          description: data.message,
          variant: "success"
        })
        setApplication(data.application)
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: data.error,
          variant: "error"
        })
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –∑–∞—è–≤–∫—É",
        variant: "error"
      })
    } finally {
      setSubmitting(false)
    }
  }

  const getStatusInfo = (status: string) => {
    switch (status) {
      case 'PENDING':
        return {
          icon: <Clock className="h-4 w-4" />,
          text: '–û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è',
          color: 'bg-yellow-100 text-yellow-800 border-yellow-200',
          description: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è'
        }
      case 'APPROVED':
        return {
          icon: <CheckCircle className="h-4 w-4" />,
          text: '–û–¥–æ–±—Ä–µ–Ω–∞',
          color: 'bg-green-100 text-green-800 border-green-200',
          description: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–æ—Ç–∞—Ü–∏–∏'
        }
      case 'REJECTED':
        return {
          icon: <XCircle className="h-4 w-4" />,
          text: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
          color: 'bg-red-100 text-red-800 border-red-200',
          description: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
        }
      case 'WITHDRAWN':
        return {
          icon: <UserX className="h-4 w-4" />,
          text: '–û—Ç–æ–∑–≤–∞–Ω–∞',
          color: 'bg-gray-100 text-gray-800 border-gray-200',
          description: '–í—ã –æ—Ç–æ–∑–≤–∞–ª–∏ —Å–≤–æ—é –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é'
        }
      default:
        return {
          icon: <Clock className="h-4 w-4" />,
          text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          color: 'bg-gray-100 text-gray-800 border-gray-200',
          description: '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
        }
    }
  }

  if (loading) {
    return (
      <Card className={className}>
        <CardContent className="p-6">
          <div className="flex items-center justify-center">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-gray-900"></div>
          </div>
        </CardContent>
      </Card>
    )
  }

  // –ï—Å–ª–∏ —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ—Ç–∞—Ü–∏–∏
  if (currentRotationStatus === 'ROTATION') {
    return (
      <Card className={`${className} bg-gradient-to-br from-green-50 to-emerald-100/50 border-green-200/50`}>
        <CardHeader className="pb-4">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-green-600 rounded-lg">
              <RotateCcw className="h-5 w-5 text-white" />
            </div>
            <div>
              <CardTitle className="text-green-900">–ü—Ä–æ–≥—Ä–∞–º–º–∞ –†–æ—Ç–∞—Ü–∏–∏</CardTitle>
              <CardDescription className="text-green-700/70">
                –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–æ—Ç–∞—Ü–∏–∏
              </CardDescription>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="flex items-center space-x-2 mb-4">
            <CheckCircle className="h-5 w-5 text-green-600" />
            <span className="font-semibold text-green-800">–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫</span>
          </div>
          <p className="text-sm text-green-700 mb-4">
            –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–æ—Ç–∞—Ü–∏–∏.
          </p>
          <div className="bg-green-50 p-3 rounded-lg">
            <p className="text-sm text-green-800">
              üí° <strong>–°–æ–≤–µ—Ç:</strong> –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
            </p>
          </div>
        </CardContent>
      </Card>
    )
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞
  if (application) {
    const statusInfo = getStatusInfo(application.status)
    
    return (
      <Card className={`${className} ${application.status === 'PENDING' ? 'bg-gradient-to-br from-yellow-50 to-amber-100/50 border-yellow-200/50' : 'bg-gradient-to-br from-blue-50 to-indigo-100/50 border-blue-200/50'}`}>
        <CardHeader className="pb-4">
          <div className="flex items-center space-x-3">
            <div className={`p-2 rounded-lg ${application.status === 'PENDING' ? 'bg-yellow-600' : 'bg-blue-600'}`}>
              <RotateCcw className="h-5 w-5 text-white" />
            </div>
            <div>
              <CardTitle className={application.status === 'PENDING' ? 'text-yellow-900' : 'text-blue-900'}>
                –ó–∞—è–≤–∫–∞ –Ω–∞ –†–æ—Ç–∞—Ü–∏—é
              </CardTitle>
              <CardDescription className={application.status === 'PENDING' ? 'text-yellow-700/70' : 'text-blue-700/70'}>
                {statusInfo.description}
              </CardDescription>
            </div>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            {statusInfo.icon}
            <Badge className={statusInfo.color}>
              {statusInfo.text}
            </Badge>
          </div>

          {application.reason && (
            <div>
              <Label className="text-sm font-medium">–ü—Ä–∏—á–∏–Ω–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:</Label>
              <p className="text-sm text-gray-700 mt-1 p-3 bg-gray-50 rounded-lg">
                {application.reason}
              </p>
            </div>
          )}

          <div className="flex items-center space-x-2 text-sm text-gray-600">
            <Calendar className="h-4 w-4" />
            <span>–ü–æ–¥–∞–Ω–∞: {new Date(application.createdAt).toLocaleDateString('ru-RU')}</span>
          </div>

          {application.reviewedAt && (
            <div className="flex items-center space-x-2 text-sm text-gray-600">
              <CheckCircle className="h-4 w-4" />
              <span>–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞: {new Date(application.reviewedAt).toLocaleDateString('ru-RU')}</span>
            </div>
          )}

          {application.reviewer && (
            <div className="flex items-center space-x-2 text-sm text-gray-600">
              <MessageSquare className="h-4 w-4" />
              <span>–†–∞—Å—Å–º–æ—Ç—Ä–µ–ª: {application.reviewer.name}</span>
            </div>
          )}

          {application.notes && (
            <div>
              <Label className="text-sm font-medium">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ HR:</Label>
              <p className="text-sm text-gray-700 mt-1 p-3 bg-gray-50 rounded-lg">
                {application.notes}
              </p>
            </div>
          )}

          {application.status === 'PENDING' && (
            <div className="pt-4 border-t">
              <Button 
                variant="outline" 
                onClick={handleWithdrawApplication}
                disabled={submitting}
                className="w-full"
              >
                {submitting ? '–û—Ç–∑—ã–≤–∞–µ–º...' : '–û—Ç–æ–∑–≤–∞—Ç—å –∑–∞—è–≤–∫—É'}
              </Button>
            </div>
          )}

          {application.status === 'REJECTED' && (
            <div className="pt-4 border-t">
              <Button 
                onClick={() => setShowReasonForm(true)}
                className="w-full"
              >
                –ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
    )
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—è–≤–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ–¥–∞—á–∏
  return (
    <Card className={`${className} bg-gradient-to-br from-blue-50 to-indigo-100/50 border-blue-200/50`}>
      <CardHeader className="pb-4">
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-blue-600 rounded-lg">
            <RotateCcw className="h-5 w-5 text-white" />
          </div>
          <div>
            <CardTitle className="text-blue-900">–ü—Ä–æ–≥—Ä–∞–º–º–∞ –†–æ—Ç–∞—Ü–∏–∏</CardTitle>
            <CardDescription className="text-blue-700/70">
              –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–æ—Ç–∞—Ü–∏–∏
            </CardDescription>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <p className="text-sm text-blue-700">
            –£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–æ—Ç–∞—Ü–∏–∏ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º:
          </p>
          <ul className="text-sm text-blue-700 space-y-1 ml-4">
            <li>‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã</li>
            <li>‚Ä¢ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –¥—Ä—É–≥–∏—Ö –æ—Ç–¥–µ–ª–∞—Ö</li>
            <li>‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö</li>
            <li>‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏</li>
          </ul>

          {!showReasonForm ? (
            <Button 
              onClick={() => setShowReasonForm(true)}
              className="w-full"
            >
              –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é
            </Button>
          ) : (
            <div className="space-y-4">
              <div>
                <Label htmlFor="reason">–ü—Ä–∏—á–∏–Ω–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
                <Textarea
                  id="reason"
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–æ—Ç–∞—Ü–∏–∏..."
                  value={reason}
                  onChange={(e) => setReason(e.target.value)}
                  className="mt-2"
                  rows={3}
                />
              </div>
              <div className="flex space-x-2">
                <Button 
                  onClick={handleSubmitApplication}
                  disabled={submitting}
                  className="flex-1"
                >
                  {submitting ? '–ü–æ–¥–∞–µ–º –∑–∞—è–≤–∫—É...' : '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'}
                </Button>
                <Button 
                  variant="outline" 
                  onClick={() => {
                    setShowReasonForm(false)
                    setReason('')
                  }}
                  disabled={submitting}
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  )
}
