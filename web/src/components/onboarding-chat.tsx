"use client"

import { useState, useRef, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Send, Loader2, Bot, User, MessageCircle, Target, Book, TrendingUp, Users, Zap } from 'lucide-react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import { TCoinRewardNotification } from '@/components/tcoin-reward-notification'

interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
}

interface OnboardingChatProps {
  className?: string
}

export function OnboardingChat({ className }: OnboardingChatProps) {
  const { data: session } = useSession()
  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null)
  const [showTopics, setShowTopics] = useState(true)
  const [rewardInfo, setRewardInfo] = useState<{
    tcoinsEarned: number
    xpEarned: number
    newTotal: number
    levelUp?: boolean
  } | null>(null)
  
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // –¢–æ–ø–∏–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  const onboardingTopics = [
    {
      id: 'welcome',
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
      description: '–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞',
      icon: Target,
      query: '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –≤ SciBox Talent. –ß—Ç–æ –º–µ–Ω—è –∂–¥–µ—Ç?',
      color: 'bg-blue-100 text-blue-800'
    },
    {
      id: 'profile_setup',
      title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è',
      description: '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
      icon: User,
      query: '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?',
      color: 'bg-green-100 text-green-800'
    },
    {
      id: 'company_info',
      title: '–û –∫–æ–º–ø–∞–Ω–∏–∏',
      description: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏',
      icon: Book,
      query: '–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏, –µ—ë –∫—É–ª—å—Ç—É—Ä–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è',
      color: 'bg-purple-100 text-purple-800'
    },
    {
      id: 'first_steps',
      title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
      description: '–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞',
      icon: TrendingUp,
      query: '–ö–∞–∫–∏–µ –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –º–Ω–µ —Å—Ç–æ–∏—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞?',
      color: 'bg-orange-100 text-orange-800'
    }
  ]

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    if (session && messages.length === 0) {
      startWelcomeChat()
    }
  }, [session])

  const startWelcomeChat = () => {
    const name = session?.user?.name ? session.user.name.split(' ')[0] : ''
    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç${name ? `, ${name}` : ''}! üëã

–Ø –ù–∞–≤–∏–≥–∞—Ç–æ—Ä - –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≤ SciBox Talent.

–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö, –∏ –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–µ—Ä–≤—ã–º–∏ —à–∞–≥–∞–º–∏. –û —á–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å?`
    
    setMessages([{
      id: '1',
      role: 'assistant',
      content: welcomeMessage,
      timestamp: new Date()
    }])
  }

  const handleTopicClick = (query: string) => {
    setInput(query)
    setShowTopics(false)
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    setTimeout(() => {
      const userMessage: Message = {
        id: Date.now().toString(),
        role: 'user',
        content: query,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, userMessage])
      setInput('')
      setIsLoading(true)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      sendMessageWithContent(query)
    }, 100)
  }

  const sendMessageWithContent = async (messageContent: string) => {
    try {
      const requestBody: any = {
        message: messageContent,
        context: {
          triggerSource: 'onboarding',
          isOnboarding: true,
          timestamp: new Date().toISOString()
        }
      }
      
      if (currentSessionId) {
        requestBody.sessionId = currentSessionId
      }

      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä—É (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥):', requestBody)

      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      })

      console.log('üì° Response status:', response.status, response.statusText)

      if (!response.ok) {
        const errorData = await response.text()
        console.error('‚ùå Response error:', errorData)
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.status} ${response.statusText}`)
      }

      const reader = response.body?.getReader()
      const decoder = new TextDecoder()

      if (reader) {
        let assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: '',
          timestamp: new Date()
        }

        setMessages(prev => [...prev, assistantMessage])

        while (true) {
          const { value, done } = await reader.read()
          if (done) break

          const chunk = decoder.decode(value, { stream: true })
          const lines = chunk.split('\n')

          for (const line of lines) {
            if (line.startsWith('data: ')) {
              try {
                const data = JSON.parse(line.slice(6))
                
                if (data.content) {
                  assistantMessage.content += data.content
                  setMessages(prev => prev.map(msg => 
                    msg.id === assistantMessage.id 
                      ? { ...msg, content: assistantMessage.content }
                      : msg
                  ))
                }

                if (data.done && data.sessionId) {
                  setCurrentSessionId(data.sessionId)
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö
                if (data.rewards) {
                  setRewardInfo(data.rewards)
                }

                if (data.error) {
                  console.error('–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data.error)
                }
              } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
              }
            }
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      setMessages(prev => [...prev, {
        id: (Date.now() + 2).toString(),
        role: 'assistant',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: new Date()
      }])
    } finally {
      setIsLoading(false)
    }
  }

  const sendMessage = async () => {
    if (!input.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input.trim(),
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    const messageContent = input.trim()
    setInput('')
    setIsLoading(true)
    setShowTopics(false) // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–º—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

    await sendMessageWithContent(messageContent)
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  const handleRewardComplete = () => {
    setRewardInfo(null)
  }

  return (
    <Card className={className}>
      <CardHeader className="pb-3">
        <div className="flex items-center space-x-2">
          <Bot className="h-6 w-6 text-blue-600" />
          <div>
            <CardTitle className="text-lg">–ù–∞–≤–∏–≥–∞—Ç–æ—Ä - –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É</CardTitle>
            <CardDescription>–ó–∞–¥–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö</CardDescription>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* –¢–æ–ø–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ */}
        {showTopics && (messages.length === 0 || (messages.length === 1 && messages[0].role === 'assistant')) && (
          <div className="space-y-3">
            <h4 className="text-sm font-medium text-gray-700">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</h4>
            <div className="grid gap-2 md:grid-cols-2">
              {onboardingTopics.map((topic) => {
                const IconComponent = topic.icon
                return (
                  <Button
                    key={topic.id}
                    variant="outline"
                    size="sm"
                    className="justify-start h-auto p-3 text-left"
                    onClick={() => handleTopicClick(topic.query)}
                  >
                    <div className="flex items-start space-x-2 w-full">
                      <div className={`p-1.5 rounded ${topic.color}`}>
                        <IconComponent className="h-3 w-3" />
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="font-medium text-xs">{topic.title}</div>
                        <div className="text-xs text-gray-500 line-clamp-2">{topic.description}</div>
                      </div>
                    </div>
                  </Button>
                )
              })}
            </div>
          </div>
        )}

        {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
        <ScrollArea className="h-96" ref={scrollAreaRef}>
          <div className="space-y-4 pr-3">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-[85%] rounded-lg px-4 py-3 ${
                    message.role === 'user'
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-100 text-gray-900 border'
                  }`}
                >
                  <div className="flex items-center space-x-2 mb-1">
                    {message.role === 'user' ? (
                      <User className="h-3 w-3" />
                    ) : (
                      <Bot className="h-3 w-3" />
                    )}
                    <span className="text-xs font-medium opacity-70">
                      {message.role === 'user' ? '–í—ã' : '–ù–∞–≤–∏–≥–∞—Ç–æ—Ä'}
                    </span>
                  </div>
                  
                  {message.role === 'assistant' ? (
                    <div className="text-sm leading-relaxed prose prose-sm max-w-none">
                      <ReactMarkdown 
                        remarkPlugins={[remarkGfm]}
                        components={{
                          p: ({ children }) => <p className="mb-2 last:mb-0">{children}</p>,
                          ul: ({ children }) => <ul className="list-disc list-inside mb-2 space-y-1">{children}</ul>,
                          ol: ({ children }) => <ol className="list-decimal list-inside mb-2 space-y-1">{children}</ol>,
                          li: ({ children }) => <li className="text-sm">{children}</li>,
                          strong: ({ children }) => <strong className="font-semibold">{children}</strong>,
                          em: ({ children }) => <em className="italic">{children}</em>,
                          code: ({ children }) => <code className="bg-gray-200 px-1 py-0.5 rounded text-xs font-mono">{children}</code>,
                          pre: ({ children }) => <pre className="bg-gray-200 p-2 rounded text-xs font-mono overflow-x-auto mb-2">{children}</pre>,
                          blockquote: ({ children }) => <blockquote className="border-l-4 border-gray-300 pl-3 italic mb-2">{children}</blockquote>,
                          h1: ({ children }) => <h1 className="text-lg font-bold mb-2">{children}</h1>,
                          h2: ({ children }) => <h2 className="text-base font-bold mb-2">{children}</h2>,
                          h3: ({ children }) => <h3 className="text-sm font-bold mb-1">{children}</h3>,
                        }}
                      >
                        {message.content}
                      </ReactMarkdown>
                    </div>
                  ) : (
                    <div className="text-sm whitespace-pre-wrap leading-relaxed">
                      {message.content}
                    </div>
                  )}
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-gray-100 border rounded-lg px-4 py-3 max-w-[85%]">
                  <div className="flex items-center space-x-2">
                    <Loader2 className="h-4 w-4 animate-spin" />
                    <span className="text-sm text-gray-600">–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–µ—Ç...</span>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </ScrollArea>
        
        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
        <div className="border-t pt-4">
          <div className="flex space-x-2">
            <Input
              placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={handleKeyPress}
              disabled={isLoading}
              className="flex-1"
            />
            <Button 
              onClick={sendMessage} 
              disabled={isLoading || !input.trim()}
              size="sm"
            >
              {isLoading ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <Send className="h-4 w-4" />
              )}
            </Button>
          </div>
        </div>
      </CardContent>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö */}
      <TCoinRewardNotification 
        rewards={rewardInfo}
        onComplete={handleRewardComplete}
      />
    </Card>
  )
}
