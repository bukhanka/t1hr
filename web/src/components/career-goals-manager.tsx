"use client"

import { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { 
  Target, 
  TrendingUp, 
  Plus, 
  Star, 
  Map,
  BookOpen,
  Users,
  Briefcase,
  Award,
  Sparkles,
  ArrowRight,
  CheckCircle2,
  Clock,
  Zap
} from "lucide-react"
import { useToast } from "@/components/ui/use-toast"

interface CareerGoal {
  id: string
  goalType: string
  target: string
  priority: number
  createdAt: Date | string
}

interface RoadmapStep {
  id: string
  title: string
  description: string
  type: 'skill' | 'course' | 'project' | 'experience'
  status: 'pending' | 'in_progress' | 'completed'
  estimatedTime: string
  xpReward?: number
  resource?: {
    id: string
    name: string
    link?: string
  }
}

interface CareerRoadmap {
  goalTarget: string
  estimatedTime: string
  progressPercentage: number
  steps: RoadmapStep[]
  recommendations: {
    courses: any[]
    projects: any[]
    mentors: any[]
  }
}

interface CareerGoalsManagerProps {
  careerGoals: CareerGoal[]
  userSkills: any[]
  onGoalsUpdate: () => void
}

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏
const CAREER_TARGETS = [
  {
    value: 'Senior Developer',
    label: 'Senior Developer',
    icon: 'üöÄ',
    description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞'
  },
  {
    value: 'Team Lead',
    label: 'Team Lead',
    icon: 'üë®‚Äçüíº',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤'
  },
  {
    value: 'Tech Lead',
    label: 'Tech Lead',
    icon: '‚ö°',
    description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–∞–º–∏'
  },
  {
    value: 'Solution Architect',
    label: 'Solution Architect',
    icon: 'üèóÔ∏è',
    description: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –¥–∏–∑–∞–π–Ω —Å–∏—Å—Ç–µ–º'
  },
  {
    value: 'Product Manager',
    label: 'Product Manager',
    icon: 'üìä',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è'
  },
  {
    value: 'DevOps Engineer',
    label: 'DevOps Engineer',
    icon: 'üîß',
    description: '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'
  },
  {
    value: 'Data Scientist',
    label: 'Data Scientist',
    icon: 'üìà',
    description: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'
  },
  {
    value: 'UX/UI Designer',
    label: 'UX/UI Designer',
    icon: 'üé®',
    description: '–î–∏–∑–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞'
  }
]

const GOAL_TYPES = [
  { value: 'vertical_growth', label: '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç', description: '–ü–æ–≤—ã—à–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏' },
  { value: 'horizontal_switch', label: '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥', description: '–°–º–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏' },
  { value: 'skill_mastery', label: '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤ –Ω–∞–≤—ã–∫–∞—Ö', description: '–£–≥–ª—É–±–ª–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã' },
  { value: 'leadership', label: '–†–∞–∑–≤–∏—Ç–∏–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞', description: '–£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏' }
]

export function CareerGoalsManager({ careerGoals, userSkills, onGoalsUpdate }: CareerGoalsManagerProps) {
  const [activeTab, setActiveTab] = useState('my-goals')
  const [loading, setLoading] = useState(false)
  const [roadmaps, setRoadmaps] = useState<{ [key: string]: CareerRoadmap }>({})
  const [selectedGoalType, setSelectedGoalType] = useState('')
  const [selectedTarget, setSelectedTarget] = useState('')
  const [priority, setPriority] = useState(3)
  
  const { toast } = useToast()

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–∞–¥–º–∞–ø—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ü–µ–ª–µ–π
    careerGoals.forEach(goal => {
      loadRoadmapForGoal(goal)
    })
  }, [careerGoals])

  const loadRoadmapForGoal = async (goal: CareerGoal) => {
    try {
      const response = await fetch(`/api/career/roadmap?target=${encodeURIComponent(goal.target)}`)
      if (response.ok) {
        const roadmap = await response.json()
        setRoadmaps(prev => ({
          ...prev,
          [goal.id]: roadmap
        }))
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∞–¥–º–∞–ø–∞:', error)
    }
  }

  const addCareerGoal = async () => {
    if (!selectedGoalType || !selectedTarget) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–ª–∏ –∏ –∂–µ–ª–∞–µ–º—É—é –ø–æ–∑–∏—Ü–∏—é",
        variant: "error"
      })
      return
    }

    setLoading(true)
    try {
      const response = await fetch('/api/career/goals', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          goalType: selectedGoalType,
          target: selectedTarget,
          priority
        })
      })

      if (response.ok) {
        const result = await response.json()
        toast({
          title: "üéØ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
          description: `–ö–∞—Ä—å–µ—Ä–Ω–∞—è —Ü–µ–ª—å "${selectedTarget}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ–∞–¥–º–∞–ø...`,
          variant: "success"
        })
        
        onGoalsUpdate()
        setSelectedGoalType('')
        setSelectedTarget('')
        setPriority(3)
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å —Ü–µ–ª—è–º–∏
        setActiveTab('my-goals')
        
      } else {
        const error = await response.json()
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å',
          variant: "error"
        })
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏',
        variant: "error"
      })
    } finally {
      setLoading(false)
    }
  }

  const updateStepStatus = async (goalId: string, stepId: string, status: 'pending' | 'in_progress' | 'completed') => {
    try {
      const response = await fetch(`/api/career/roadmap/steps/${stepId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status })
      })

      if (response.ok) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setRoadmaps(prev => ({
          ...prev,
          [goalId]: {
            ...prev[goalId],
            steps: prev[goalId]?.steps.map(step => 
              step.id === stepId ? { ...step, status } : step
            ) || []
          }
        }))

        if (status === 'completed') {
          toast({
            title: "üéâ –®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω!",
            description: "–í—ã –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∫–∞—Ä—å–µ—Ä–Ω–æ–π —Ü–µ–ª–∏",
            variant: "success"
          })
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —à–∞–≥–∞:', error)
    }
  }

  const getStepIcon = (type: string, status: string) => {
    const isCompleted = status === 'completed'
    const isInProgress = status === 'in_progress'
    
    if (isCompleted) return <CheckCircle2 className="w-4 h-4 text-green-600" />
    if (isInProgress) return <Clock className="w-4 h-4 text-blue-600 animate-pulse" />

    switch (type) {
      case 'skill': return <Zap className="w-4 h-4 text-purple-600" />
      case 'course': return <BookOpen className="w-4 h-4 text-blue-600" />
      case 'project': return <Briefcase className="w-4 h-4 text-orange-600" />
      case 'experience': return <Users className="w-4 h-4 text-green-600" />
      default: return <Target className="w-4 h-4 text-gray-600" />
    }
  }

  const getProgressColor = (percentage: number) => {
    if (percentage >= 80) return 'text-green-600'
    if (percentage >= 50) return 'text-blue-600'
    if (percentage >= 25) return 'text-orange-600'
    return 'text-gray-600'
  }

  return (
    <div className="space-y-6">
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList>
          <TabsTrigger value="my-goals">
            <Target className="w-4 h-4 mr-2" />
            –ú–æ–∏ —Ü–µ–ª–∏ ({careerGoals.length})
          </TabsTrigger>
          <TabsTrigger value="roadmaps">
            <Map className="w-4 h-4 mr-2" />
            –†–æ–∞–¥–º–∞–ø—ã —Ä–∞–∑–≤–∏—Ç–∏—è
          </TabsTrigger>
          <TabsTrigger value="add-goal">
            <Plus className="w-4 h-4 mr-2" />
            –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å
          </TabsTrigger>
        </TabsList>

        {/* –ú–æ–∏ —Ü–µ–ª–∏ */}
        <TabsContent value="my-goals" className="space-y-4">
          {careerGoals.length === 0 ? (
            <Card className="text-center py-8">
              <CardContent>
                <Target className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                <h3 className="text-lg font-semibold mb-2">–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã</h3>
                <p className="text-muted-foreground mb-4">
                  –ü–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞—Ä—å–µ—Ä–Ω—É—é —Ü–µ–ª—å –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ–∞–¥–º–∞–ø —Ä–∞–∑–≤–∏—Ç–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à–∞–≥–∞–º–∏
                </p>
                <Button onClick={() => setActiveTab('add-goal')}>
                  <Plus className="w-4 h-4 mr-2" />
                  –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ü–µ–ª—å
                </Button>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-4">
              {careerGoals.map((goal) => (
                <Card key={goal.id} className="hover:shadow-md transition-shadow">
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className="text-2xl">
                          {CAREER_TARGETS.find(t => t.value === goal.target)?.icon || 'üéØ'}
                        </div>
                        <div>
                          <CardTitle className="text-lg">{goal.target}</CardTitle>
                          <CardDescription>
                            {GOAL_TYPES.find(t => t.value === goal.goalType)?.label} ‚Ä¢ 
                            –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {goal.priority}/5
                          </CardDescription>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge variant="outline">
                          {roadmaps[goal.id] ? `${roadmaps[goal.id].progressPercentage}% –≥–æ—Ç–æ–≤–æ` : '–ó–∞–≥—Ä—É–∂–∞–µ–º...'}
                        </Badge>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => setActiveTab('roadmaps')}
                        >
                          <Map className="w-4 h-4 mr-1" />
                          –†–æ–∞–¥–º–∞–ø
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  
                  {roadmaps[goal.id] && (
                    <CardContent>
                      <div className="space-y-3">
                        <div className="flex justify-between items-center text-sm">
                          <span className="text-muted-foreground">–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–≤–∏—Ç–∏—è</span>
                          <span className={`font-medium ${getProgressColor(roadmaps[goal.id].progressPercentage)}`}>
                            {roadmaps[goal.id].progressPercentage}%
                          </span>
                        </div>
                        <Progress 
                          value={roadmaps[goal.id].progressPercentage} 
                          className="h-2"
                        />
                        <div className="flex justify-between items-center text-xs text-muted-foreground">
                          <span>–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: {roadmaps[goal.id].estimatedTime}</span>
                          <span>
                            {roadmaps[goal.id].steps.filter(s => s.status === 'completed').length} –∏–∑ {roadmaps[goal.id].steps.length} —à–∞–≥–æ–≤
                          </span>
                        </div>
                      </div>
                    </CardContent>
                  )}
                </Card>
              ))}
            </div>
          )}
        </TabsContent>

        {/* –†–æ–∞–¥–º–∞–ø—ã —Ä–∞–∑–≤–∏—Ç–∏—è */}
        <TabsContent value="roadmaps" className="space-y-4">
          {Object.keys(roadmaps).length === 0 ? (
            <Card className="text-center py-8">
              <CardContent>
                <Map className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                <h3 className="text-lg font-semibold mb-2">–†–æ–∞–¥–º–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p className="text-muted-foreground mb-4">
                  –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–æ–∞–¥–º–∞–ø–æ–≤
                </p>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-6">
              {careerGoals.map((goal) => {
                const roadmap = roadmaps[goal.id]
                if (!roadmap) return null

                return (
                  <Card key={goal.id}>
                    <CardHeader>
                      <CardTitle className="flex items-center space-x-2">
                        <span className="text-2xl">
                          {CAREER_TARGETS.find(t => t.value === goal.target)?.icon || 'üéØ'}
                        </span>
                        <span>–†–æ–∞–¥–º–∞–ø: {goal.target}</span>
                      </CardTitle>
                      <CardDescription>
                        –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤
                      </CardDescription>
                    </CardHeader>
                    
                    <CardContent className="space-y-6">
                      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
                      <div className="grid md:grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg">
                        <div className="text-center">
                          <div className={`text-2xl font-bold ${getProgressColor(roadmap.progressPercentage)}`}>
                            {roadmap.progressPercentage}%
                          </div>
                          <div className="text-sm text-muted-foreground">–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</div>
                        </div>
                        <div className="text-center">
                          <div className="text-2xl font-bold text-blue-600">
                            {roadmap.estimatedTime}
                          </div>
                          <div className="text-sm text-muted-foreground">–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è</div>
                        </div>
                        <div className="text-center">
                          <div className="text-2xl font-bold text-green-600">
                            {roadmap.steps.filter(s => s.status === 'completed').length}/{roadmap.steps.length}
                          </div>
                          <div className="text-sm text-muted-foreground">–í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤</div>
                        </div>
                      </div>

                      {/* –®–∞–≥–∏ —Ä–æ–∞–¥–º–∞–ø–∞ */}
                      <div className="space-y-4">
                        <h4 className="font-semibold flex items-center">
                          <Sparkles className="w-4 h-4 mr-2" />
                          –ü–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è
                        </h4>
                        
                        <div className="space-y-3">
                          {roadmap.steps.map((step, index) => (
                            <div 
                              key={step.id}
                              className={`p-4 border rounded-lg transition-all ${
                                step.status === 'completed' ? 'bg-green-50 border-green-200' :
                                step.status === 'in_progress' ? 'bg-blue-50 border-blue-200' :
                                'bg-white border-gray-200 hover:border-gray-300'
                              }`}
                            >
                              <div className="flex items-start space-x-3">
                                <div className="flex-shrink-0 mt-1">
                                  {getStepIcon(step.type, step.status)}
                                </div>
                                
                                <div className="flex-1 min-w-0">
                                  <div className="flex items-center justify-between">
                                    <h5 className="font-medium text-gray-900">
                                      {index + 1}. {step.title}
                                    </h5>
                                    <div className="flex items-center space-x-2">
                                      {step.xpReward && (
                                        <Badge variant="secondary">
                                          +{step.xpReward} XP
                                        </Badge>
                                      )}
                                      <Badge variant="outline" className="text-xs">
                                        {step.estimatedTime}
                                      </Badge>
                                    </div>
                                  </div>
                                  
                                  <p className="mt-1 text-sm text-gray-600">
                                    {step.description}
                                  </p>
                                  
                                  {step.resource && (
                                    <div className="mt-2 flex items-center space-x-2">
                                      <ArrowRight className="w-3 h-3 text-gray-400" />
                                      <span className="text-sm text-blue-600">
                                        {step.resource.name}
                                      </span>
                                    </div>
                                  )}
                                  
                                  <div className="mt-3 flex gap-2">
                                    {step.status === 'pending' && (
                                      <Button
                                        size="sm"
                                        variant="outline"
                                        onClick={() => updateStepStatus(goal.id, step.id, 'in_progress')}
                                      >
                                        –ù–∞—á–∞—Ç—å
                                      </Button>
                                    )}
                                    {step.status === 'in_progress' && (
                                      <Button
                                        size="sm"
                                        onClick={() => updateStepStatus(goal.id, step.id, 'completed')}
                                      >
                                        –ó–∞–≤–µ—Ä—à–∏—Ç—å
                                      </Button>
                                    )}
                                    {step.resource?.link && (
                                      <Button
                                        size="sm"
                                        variant="ghost"
                                        asChild
                                      >
                                        <a href={step.resource.link} target="_blank" rel="noopener noreferrer">
                                          –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å—É
                                        </a>
                                      </Button>
                                    )}
                                  </div>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
                      <div className="grid md:grid-cols-3 gap-4 pt-4 border-t">
                        <div>
                          <h5 className="font-medium mb-2 flex items-center">
                            <BookOpen className="w-4 h-4 mr-1" />
                            –ö—É—Ä—Å—ã ({roadmap.recommendations.courses.length})
                          </h5>
                          <div className="space-y-1">
                            {roadmap.recommendations.courses.slice(0, 2).map((course: any) => (
                              <div key={course.id} className="text-sm text-blue-600 hover:underline cursor-pointer">
                                {course.title}
                              </div>
                            ))}
                          </div>
                        </div>
                        
                        <div>
                          <h5 className="font-medium mb-2 flex items-center">
                            <Briefcase className="w-4 h-4 mr-1" />
                            –ü—Ä–æ–µ–∫—Ç—ã ({roadmap.recommendations.projects.length})
                          </h5>
                          <div className="space-y-1">
                            {roadmap.recommendations.projects.slice(0, 2).map((project: any) => (
                              <div key={project.id} className="text-sm text-orange-600 hover:underline cursor-pointer">
                                {project.name}
                              </div>
                            ))}
                          </div>
                        </div>
                        
                        <div>
                          <h5 className="font-medium mb-2 flex items-center">
                            <Users className="w-4 h-4 mr-1" />
                            –ú–µ–Ω—Ç–æ—Ä—ã ({roadmap.recommendations.mentors.length})
                          </h5>
                          <div className="space-y-1">
                            {roadmap.recommendations.mentors.slice(0, 2).map((mentor: any) => (
                              <div key={mentor.id} className="text-sm text-green-600 hover:underline cursor-pointer">
                                {mentor.title}
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}
            </div>
          )}
        </TabsContent>

        {/* –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å */}
        <TabsContent value="add-goal" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—å–µ—Ä–Ω—É—é —Ü–µ–ª—å</CardTitle>
              <CardDescription>
                –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ–∞–¥–º–∞–ø —Ä–∞–∑–≤–∏—Ç–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à–∞–≥–∞–º–∏
              </CardDescription>
            </CardHeader>
            
            <CardContent className="space-y-6">
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <Label className="text-sm font-medium mb-2 block">–¢–∏–ø –∫–∞—Ä—å–µ—Ä–Ω–æ–π —Ü–µ–ª–∏</Label>
                  <Select value={selectedGoalType} onValueChange={setSelectedGoalType}>
                    <SelectTrigger>
                      <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–∑–≤–∏—Ç–∏—è" />
                    </SelectTrigger>
                    <SelectContent>
                      {GOAL_TYPES.map(type => (
                        <SelectItem key={type.value} value={type.value}>
                          <div>
                            <div className="font-medium">{type.label}</div>
                            <div className="text-xs text-muted-foreground">{type.description}</div>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label className="text-sm font-medium mb-2 block">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-5)</Label>
                  <Select value={priority.toString()} onValueChange={(value) => setPriority(parseInt(value))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5].map(p => (
                        <SelectItem key={p} value={p.toString()}>
                          {p} - {p === 1 ? '–ù–∏–∑–∫–∏–π' : p === 5 ? '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π' : p === 3 ? '–°—Ä–µ–¥–Ω–∏–π' : p === 2 ? '–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ' : '–í—ã—Å–æ–∫–∏–π'}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label className="text-sm font-medium mb-2 block">–¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è</Label>
                <div className="grid gap-3 md:grid-cols-2 lg:grid-cols-3">
                  {CAREER_TARGETS.map(target => (
                    <Card
                      key={target.value}
                      className={`cursor-pointer transition-all hover:shadow-md ${
                        selectedTarget === target.value ? 'ring-2 ring-blue-500 bg-blue-50' : 'hover:bg-gray-50'
                      }`}
                      onClick={() => setSelectedTarget(target.value)}
                    >
                      <CardContent className="p-4">
                        <div className="flex items-center space-x-3">
                          <span className="text-2xl">{target.icon}</span>
                          <div>
                            <h4 className="font-medium">{target.label}</h4>
                            <p className="text-xs text-muted-foreground">
                              {target.description}
                            </p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>

              <div className="flex gap-3">
                <Button
                  onClick={addCareerGoal}
                  disabled={loading || !selectedGoalType || !selectedTarget}
                  className="flex-1"
                >
                  {loading ? '–°–æ–∑–¥–∞–µ–º —Ä–æ–∞–¥–º–∞–ø...' : (
                    <>
                      <Target className="w-4 h-4 mr-2" />
                      –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å –∏ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∞–¥–º–∞–ø
                    </>
                  )}
                </Button>
              </div>

              {selectedTarget && (
                <Card className="bg-blue-50">
                  <CardContent className="pt-4">
                    <div className="flex items-start space-x-3">
                      <Sparkles className="w-5 h-5 text-blue-600 mt-1" />
                      <div>
                        <h4 className="font-medium text-blue-900">
                          –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏?
                        </h4>
                        <ul className="mt-2 text-sm text-blue-800 space-y-1">
                          <li>‚Ä¢ –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç</li>
                          <li>‚Ä¢ –°–æ–∑–¥–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ–∞–¥–º–∞–ø —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à–∞–≥–∞–º–∏</li>
                          <li>‚Ä¢ –ü–æ–¥–±–µ—Ä–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Ä—Å—ã, –ø—Ä–æ–µ–∫—Ç—ã –∏ –º–µ–Ω—Ç–æ—Ä–æ–≤</li>
                          <li>‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏</li>
                        </ul>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
