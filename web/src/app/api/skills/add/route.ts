import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { GamificationService } from '@/lib/gamification'
import { z } from 'zod'

const addSkillSchema = z.object({
  skillId: z.string().cuid(),
  level: z.number().min(1).max(5),
  status: z.enum(['USING', 'WANTS_TO_LEARN'])
})

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const body = await request.json()
    const validation = addSkillSchema.safeParse(body)
    
    if (!validation.success) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', details: validation.error.errors },
        { status: 400 }
      )
    }

    const { skillId, level, status } = validation.data

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
    const skill = await prisma.skill.findUnique({
      where: { id: skillId }
    })

    if (!skill) {
      return NextResponse.json(
        { error: '–ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –Ω–∞–≤—ã–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingSkill = await prisma.userSkill.findUnique({
      where: {
        profileId_skillId: {
          profileId: profile.id,
          skillId: skillId
        }
      }
    })

    if (existingSkill) {
      return NextResponse.json(
        { error: '–≠—Ç–æ—Ç –Ω–∞–≤—ã–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å' }, 
        { status: 409 }
      )
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userSkill = await prisma.userSkill.create({
      data: {
        profileId: profile.id,
        skillId: skillId,
        level,
        status,
        isVerified: false
      },
      include: {
        skill: true
      }
    })

    // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
    const xpMultiplier = status === 'USING' ? 1 : 0.5 // –ó–∞ —Ü–µ–ª–∏ –º–µ–Ω—å—à–µ XP
    const gamificationResult = await GamificationService.awardXP(
      session.user.id, 
      'SKILL_ADDED',
      xpMultiplier
    )

    console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.user.email} –¥–æ–±–∞–≤–∏–ª –Ω–∞–≤—ã–∫ "${skill.name}" (${status}, —É—Ä–æ–≤–µ–Ω—å ${level})`)

    return NextResponse.json({ 
      success: true,
      message: `–ù–∞–≤—ã–∫ "${skill.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å`,
      userSkill,
      xpReward: gamificationResult?.xpAwarded || 0,
      gamification: gamificationResult
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}
