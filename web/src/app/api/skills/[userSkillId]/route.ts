import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { z } from 'zod'

const updateSkillSchema = z.object({
  level: z.number().min(1).max(5).optional(),
  status: z.enum(['USING', 'WANTS_TO_LEARN']).optional(),
  isVerified: z.boolean().optional()
})

export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ userSkillId: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const { userSkillId } = await params
    const body = await request.json()
    const validation = updateSkillSchema.safeParse(body)
    
    if (!validation.success) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', details: validation.error.errors },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≤—ã–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userSkill = await prisma.userSkill.findUnique({
      where: { id: userSkillId },
      include: {
        profile: true,
        skill: true
      }
    })

    if (!userSkill || userSkill.profile.userId !== session.user.id) {
      return NextResponse.json(
        { error: '–ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º' }, 
        { status: 404 }
      )
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤—ã–∫
    const updatedSkill = await prisma.userSkill.update({
      where: { id: userSkillId },
      data: validation.data,
      include: {
        skill: true
      }
    })

    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –Ω–∞–≤—ã–∫ "${updatedSkill.skill.name}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${session.user.email}`)

    return NextResponse.json({ 
      success: true,
      message: '–ù–∞–≤—ã–∫ –æ–±–Ω–æ–≤–ª–µ–Ω',
      userSkill: updatedSkill
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ userSkillId: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const { userSkillId } = await params

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≤—ã–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userSkill = await prisma.userSkill.findUnique({
      where: { id: userSkillId },
      include: {
        profile: true,
        skill: true
      }
    })

    if (!userSkill || userSkill.profile.userId !== session.user.id) {
      return NextResponse.json(
        { error: '–ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º' }, 
        { status: 404 }
      )
    }

    // –£–¥–∞–ª—è–µ–º –Ω–∞–≤—ã–∫
    await prisma.userSkill.delete({
      where: { id: userSkillId }
    })

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –Ω–∞–≤—ã–∫ "${userSkill.skill.name}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${session.user.email}`)

    return NextResponse.json({ 
      success: true,
      message: '–ù–∞–≤—ã–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è'
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}
