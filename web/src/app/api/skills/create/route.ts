import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { z } from 'zod'

const createSkillSchema = z.object({
  name: z.string().min(1).max(50),
  category: z.string().optional().default('Custom')
})

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const body = await request.json()
    const validation = createSkillSchema.safeParse(body)
    
    if (!validation.success) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', details: validation.error.errors },
        { status: 400 }
      )
    }

    const { name, category } = validation.data

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –Ω–∞–≤—ã–∫–∞
    const existingSkill = await prisma.skill.findFirst({
      where: { name: { equals: name.trim(), mode: 'insensitive' } }
    })

    if (existingSkill) {
      return NextResponse.json(existingSkill)
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫
    const skill = await prisma.skill.create({
      data: {
        name: name.trim(),
        category: category || 'Custom',
        description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –Ω–∞–≤—ã–∫: ${name.trim()}`
      }
    })

    console.log(`üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫: "${skill.name}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${session.user.email}`)

    return NextResponse.json(skill)

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}
