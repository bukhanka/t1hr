import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { GamificationService } from '@/lib/gamification'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const { skillId } = await request.json()

    if (!skillId) {
      return NextResponse.json(
        { error: 'ID –Ω–∞–≤—ã–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, 
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
    const skill = await prisma.skill.findUnique({
      where: { id: skillId }
    })

    if (!skill) {
      return NextResponse.json(
        { error: '–ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –Ω–∞–≤—ã–∫ –≤ —Ü–µ–ª–∏
    const existingSkill = await prisma.userSkill.findFirst({
      where: {
        profileId: profile.id,
        skillId: skillId
      }
    })

    if (existingSkill) {
      return NextResponse.json(
        { error: '–ù–∞–≤—ã–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ü–µ–ª–∏' }, 
        { status: 409 }
      )
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫ –≤ —Ü–µ–ª–∏ (—Å–æ —Å—Ç–∞—Ç—É—Å–æ–º WANTS_TO_LEARN)
    const userSkill = await prisma.userSkill.create({
      data: {
        profileId: profile.id,
        skillId: skillId,
        level: 1, // –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –Ω–∞–≤—ã–∫–∞ –≤ —Ü–µ–ª—è—Ö
        status: 'WANTS_TO_LEARN'
      },
      include: {
        skill: true
      }
    })

    // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –≤ —Ü–µ–ª–∏
    const gamificationResult = await GamificationService.awardXP(
      session.user.id, 
      'SKILL_ADDED',
      1
    )

    console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.user.email} –¥–æ–±–∞–≤–∏–ª –Ω–∞–≤—ã–∫ "${skill.name}" –≤ —Ü–µ–ª–∏`)

    return NextResponse.json({ 
      success: true,
      message: `–ù–∞–≤—ã–∫ "${skill.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ü–µ–ª–∏`,
      userSkill,
      gamification: gamificationResult
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞ –≤ —Ü–µ–ª–∏:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}