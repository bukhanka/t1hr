import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { GamificationService } from '@/lib/gamification'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const { jobId } = await request.json()

    if (!jobId) {
      return NextResponse.json(
        { error: 'ID –≤–∞–∫–∞–Ω—Å–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, 
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    const job = await prisma.jobOpening.findUnique({
      where: { id: jobId }
    })

    if (!job) {
      return NextResponse.json(
        { error: '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, 
        { status: 404 }
      )
    }

    if (job.status !== 'OPEN') {
      return NextResponse.json(
        { error: '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' }, 
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id },
      include: {
        userSkills: {
          include: { skill: true }
        }
      }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    const userSkillNames = profile.userSkills
      .filter(us => us.status === 'USING')
      .map(us => us.skill.name.toLowerCase())
    
    const requiredSkills = job.requirements.map(req => req.toLowerCase())
    const matchingSkills = requiredSkills.filter(req => 
      userSkillNames.some(userSkill => userSkill.includes(req) || req.includes(userSkill))
    )
    
    const matchPercentage = Math.round((matchingSkills.length / requiredSkills.length) * 100)

    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ç–∞–±–ª–∏—Ü–∞ JobApplications
    // –î–ª—è –¥–µ–º–æ –ª–æ–≥–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –∏ –Ω–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    
    // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏
    const gamificationResult = await GamificationService.awardXP(
      session.user.id, 
      'CAREER_GOAL_SET', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π
      1.0
    )

    console.log(`üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.user.email} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é "${job.title}"`)
    console.log(`   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–≤—ã–∫–æ–≤: ${matchPercentage}% (${matchingSkills.length}/${requiredSkills.length})`)
    console.log(`   –°–æ–≤–ø–∞–¥–∞—é—â–∏–µ –Ω–∞–≤—ã–∫–∏: ${matchingSkills.join(', ')}`)

    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞—è–≤–æ–∫:
    // const application = await prisma.jobApplication.create({
    //   data: {
    //     profileId: profile.id,
    //     jobId: jobId,
    //     status: 'PENDING',
    //     matchPercentage,
    //     appliedAt: new Date()
    //   }
    // })

    return NextResponse.json({ 
      success: true,
      message: `–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é "${job.title}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`,
      matchPercentage,
      matchingSkills,
      requiredSkills: job.requirements,
      gamification: gamificationResult,
      note: '–í –¥–∞–Ω–Ω–æ–π –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –∑–∞—è–≤–∫–∞ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}
