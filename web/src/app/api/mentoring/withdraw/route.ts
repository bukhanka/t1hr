import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const { programId } = await request.json()

    if (!programId) {
      return NextResponse.json(
        { error: 'ID –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, 
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –æ –º–µ–Ω—Ç–æ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
    const application = await prisma.userMentorProgram.findFirst({
      where: {
        profileId: profile.id,
        programId: programId
      },
      include: {
        program: true
      }
    })

    if (!application) {
      return NextResponse.json(
        { error: '–í—ã –Ω–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É' }, 
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–æ–∑–≤–∞—Ç—å –∑–∞—è–≤–∫—É
    if (application.status === 'ACCEPTED' || application.status === 'COMPLETED') {
      return NextResponse.json(
        { error: '–ù–µ–ª—å–∑—è –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∏–Ω—è—Ç—É—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É' }, 
        { status: 400 }
      )
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
    await prisma.userMentorProgram.delete({
      where: {
        id: application.id
      }
    })

    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.user.email} –æ—Ç–æ–∑–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –º–µ–Ω—Ç–æ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É "${application.program.title}"`)

    return NextResponse.json({ 
      success: true,
      message: `–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É "${application.program.title}" –æ—Ç–æ–∑–≤–∞–Ω–∞`
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}
