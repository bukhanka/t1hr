import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const { programId } = await request.json()

    if (!programId) {
      return NextResponse.json(
        { error: 'ID –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, 
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    const program = await prisma.mentorProgram.findUnique({
      where: { id: programId },
      include: {
        participants: true
      }
    })

    if (!program) {
      return NextResponse.json(
        { error: '–ú–µ–Ω—Ç–æ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, 
        { status: 404 }
      )
    }

    if (program.status !== 'ACTIVE') {
      return NextResponse.json(
        { error: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' }, 
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
    const existingParticipation = await prisma.userMentorProgram.findUnique({
      where: {
        profileId_programId: {
          profileId: profile.id,
          programId: programId
        }
      }
    })

    if (existingParticipation) {
      return NextResponse.json(
        { error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ' }, 
        { status: 409 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
    const menteeCount = program.participants.filter((p: any) => p.role === 'MENTEE').length
    if (menteeCount >= program.maxSlots) {
      return NextResponse.json(
        { error: '–í –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç' }, 
        { status: 409 }
      )
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–∞–∫ MENTEE
    const participation = await prisma.userMentorProgram.create({
      data: {
        profileId: profile.id,
        programId: programId,
        role: 'MENTEE',
        status: 'ACTIVE'
      },
      include: {
        program: true
      }
    })

    console.log(`üë®‚Äçüè´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.user.email} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –º–µ–Ω—Ç–æ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ "${program.title}"`)

    return NextResponse.json({ 
      success: true,
      message: `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ "${program.title}"`,
      participation
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏ –≤ –º–µ–Ω—Ç–æ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}
