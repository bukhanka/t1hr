import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { GamificationService } from '@/lib/gamification'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const { sessionId } = await request.json()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    const chatSession = await prisma.chatSession.findUnique({
      where: { id: sessionId },
      include: { profile: true }
    })

    if (!chatSession) {
      return NextResponse.json(
        { error: '–°–µ—Å—Å–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ—Å—Å–∏–∏
    if (chatSession.profile.userId !== session.user.id) {
      return NextResponse.json(
        { error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' },
        { status: 403 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id },
      include: {
        userSkills: { include: { skill: true } }
      }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    // –ï—Å–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    if (profile.onboardingCompleted) {
      return NextResponse.json({
        success: true,
        alreadyCompleted: true,
        profile: {
          onboardingCompleted: profile.onboardingCompleted,
          profileStrength: profile.profileStrength,
          tCoins: profile.tCoins
        }
      })
    }

    // –û—Ç–º–µ—á–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    const updatedProfile = await prisma.profile.update({
      where: { userId: session.user.id },
      data: {
        onboardingCompleted: true,
        onboardingCompletedAt: new Date(),
        profileStrength: Math.max(profile.profileStrength, 60), // –ú–∏–Ω. 60% –ø–æ—Å–ª–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        tCoins: profile.tCoins + 200 // –ë–æ–Ω—É—Å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      }
    })

    // –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ XP –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    await GamificationService.awardXP(session.user.id, 'PROFILE_UPDATED', 1)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
    await prisma.chatSession.update({
      where: { id: sessionId },
      data: {
        title: "üéâ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"
      }
    })

    return NextResponse.json({
      success: true,
      rewards: {
        tCoinsEarned: 200,
        profileBonus: updatedProfile.profileStrength - profile.profileStrength,
        xpEarned: 25
      },
      profile: {
        onboardingCompleted: updatedProfile.onboardingCompleted,
        profileStrength: updatedProfile.profileStrength,
        tCoins: updatedProfile.tCoins,
        level: updatedProfile.level,
        xp: updatedProfile.xp
      }
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
