import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { openai, MODELS } from '@/lib/openai'
import { GamificationService } from '@/lib/gamification'
import { z } from 'zod'

const onboardingChatSchema = z.object({
  message: z.string().min(1, '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
  sessionId: z.string(),
  stage: z.string().optional()
})

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞  
async function buildOnboardingSystemPrompt(userId: string): Promise<string> {
  const profile = await prisma.profile.findUnique({
    where: { userId },
    include: {
      userSkills: { include: { skill: true } },
      userProjects: { include: { project: true } },
      careerGoals: true
    }
  })

  const currentSkills = profile?.userSkills
    ?.filter((us: any) => us.status === 'USING')
    ?.map((us: any) => us.skill.name) || []

  const projects = profile?.userProjects
    ?.map((up: any) => up.project.name) || []

  const goals = profile?.careerGoals
    ?.map((cg: any) => cg.target) || []

  return `–¢—ã - –ù–∞–≤–∏–≥–∞—Ç–æ—Ä, –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –û–ù–ë–û–†–î–ò–ù–ì–ê –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ T1.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –∑–∞ 5-7 –º–∏–Ω—É—Ç –∏ —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.

–≠–¢–ê–ü–´ –û–ù–ë–û–†–î–ò–ù–ì–ê (–ø—Ä–æ–≤–æ–¥–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ):
1. üíº –¢–ï–ö–£–©–ê–Ø –†–û–õ–¨ - —É–∑–Ω–∞–π –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –æ–ø—ã—Ç, –∫–ª—é—á–µ–≤—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
2. üõ†Ô∏è –¢–ï–•–ù–û–õ–û–ì–ò–ò - –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç, —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è  
3. üöÄ –ü–†–û–ï–ö–¢–´ - –ª—É—á—à–∏–π/–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–µ–∫—Ç, —Ä–æ–ª—å, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
4. üéØ –¶–ï–õ–ò - –∫—É–¥–∞ —Ö–æ—á–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏–∑—É—á–∞—Ç—å
5. ‚ú® –§–ò–ù–ê–õ - —Ä–µ–∑—é–º–µ + –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è + –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥

–ü–†–ê–í–ò–õ–ê –í–ï–î–ï–ù–ò–Ø –ò–ù–¢–ï–†–í–¨–Æ:
‚úÖ –ó–∞–¥–∞–≤–∞–π 1 –ö–û–ù–ö–†–ï–¢–ù–´–ô –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑
‚úÖ –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö  
‚úÖ –•–í–ê–õ–ò –∏ –º–æ—Ç–∏–≤–∏—Ä—É–π –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
‚úÖ –û–±—ä—è—Å–Ω—è–π, –ö–ê–ö –æ—Ç–≤–µ—Ç –ø–æ–º–æ–∂–µ—Ç –≤ –∫–∞—Ä—å–µ—Ä–µ
‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ

üìù –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –í–û–ü–†–û–°–û–í:
‚Ä¢ –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π bullet points (‚Ä¢) –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å –ø–æ–¥–ø—É–Ω–∫—Ç–∞–º–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã:
  ‚Ä¢ –ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å [—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è]?
  ‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤—è—Ç—Å—è?
  ‚Ä¢ –ö—É–¥–∞ —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –∫–∞—Ä—å–µ—Ä–µ?

–ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–û–í:
- –ò–ó–í–õ–ï–ö–ê–ô –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —É—Ä–æ–≤–Ω–∏
- –û–ü–†–ï–î–ï–õ–Ø–ô –ø—Ä–æ–µ–∫—Ç—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
- –í–´–Ø–í–õ–Ø–ô –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
- –ü–†–ï–î–õ–ê–ì–ê–ô –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ T1

–£–ñ–ï –ò–ó–í–ï–°–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:
- –¢–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏: ${currentSkills.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
- –ü—Ä–æ–µ–∫—Ç—ã: ${projects.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
- –¶–µ–ª–∏: ${goals.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
- –£—Ä–æ–≤–µ–Ω—å: ${profile?.level || 1} (${profile?.xp || 0} XP)
- T-Coins: ${profile?.tCoins || 100}

–ú–û–¢–ò–í–ê–¶–ò–Ø:
- –ó–∞ –∫–∞–∂–¥—ã–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç - "+25 T-Coins!"
- –ó–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ - "+100 T-Coins!"
- –ó–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ü–µ–ª–µ–π - "+50 T-Coins!"
- –ó–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ - "+200 T-Coins!"

–§–ò–ù–ê–õ–¨–ù–´–ô –≠–¢–ê–ü (–∫–æ–≥–¥–∞ —Å–æ–±—Ä–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è):
–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–µ–¥–ª–æ–∂–∏:
1. 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–∞–≤—ã–∫–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
2. 2 –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ T1
3. –ü–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –º–µ—Å—è—Ü–∞

–í–µ–¥–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º!`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò
async function extractProfileDataFromResponse(userId: string, userMessage: string, aiResponse: string) {
  try {
    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
    const skillKeywords = [
      'javascript', 'js', 'typescript', 'ts', 'python', 'java', 'react', 'vue', 'angular',
      'node', 'express', 'spring', 'django', 'flask', 'postgresql', 'mysql', 'mongodb',
      'redis', 'docker', 'kubernetes', 'aws', 'azure', 'git', 'figma', 'photoshop',
      'html', 'css', 'sass', 'less', 'webpack', 'vite', 'next', 'nuxt', 'svelte'
    ]

    const mentionedSkills = skillKeywords.filter(skill => 
      userMessage.toLowerCase().includes(skill) || 
      userMessage.toLowerCase().includes(skill.replace('js', 'javascript'))
    )

    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞–≤—ã–∫–∏
    for (const skillName of mentionedSkills) {
      const skill = await prisma.skill.findFirst({
        where: { name: { equals: skillName, mode: 'insensitive' } }
      }) || await prisma.skill.create({
        data: { name: skillName.charAt(0).toUpperCase() + skillName.slice(1) }
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç)
      await prisma.userSkill.upsert({
        where: {
          profileId_skillId: {
            profileId: (await prisma.profile.findUnique({ where: { userId } }))!.id,
            skillId: skill.id
          }
        },
        create: {
          profileId: (await prisma.profile.findUnique({ where: { userId } }))!.id,
          skillId: skill.id,
          level: 3, // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          status: 'USING'
        },
        update: {} // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
      })
    }

    // –ù–∞—á–∏—Å–ª—è–µ–º T-Coins –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
    if (mentionedSkills.length > 0) {
      await GamificationService.awardXP(userId, 'SKILL_ADDED', mentionedSkills.length)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å—á–∏—Ç–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
    // –ï—Å–ª–∏ —Å–æ–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3+ –Ω–∞–≤—ã–∫–æ–≤), –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    const profile = await prisma.profile.findUnique({ where: { userId } })
    if (profile && !profile.onboardingCompleted && mentionedSkills.length >= 2) {
      await prisma.profile.update({
        where: { userId },
        data: { 
          onboardingCompleted: true,
          onboardingCompletedAt: new Date(),
          profileStrength: Math.max(profile.profileStrength, 60) // –ú–∏–Ω. 60% –ø–æ—Å–ª–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        }
      })
    }

    return {
      skillsExtracted: mentionedSkills.length,
      skills: mentionedSkills
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', error)
    return { skillsExtracted: 0, skills: [] }
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const body = await request.json()
    const validation = onboardingChatSchema.safeParse(body)
    
    if (!validation.success) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', details: validation.error.errors },
        { status: 400 }
      )
    }

    const { message, sessionId, stage } = validation.data

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    const chatSession = await prisma.chatSession.findUnique({
      where: { id: sessionId },
      include: { messages: { orderBy: { createdAt: 'asc' } } }
    })

    if (!chatSession) {
      return NextResponse.json(
        { error: '–°–µ—Å—Å–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      )
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.chatMessage.create({
      data: {
        sessionId: chatSession.id,
        role: 'USER',
        content: message
      }
    })

    // –°—Ç—Ä–æ–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    const systemPrompt = await buildOnboardingSystemPrompt(session.user.id)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    const messages = [
      { role: 'system' as const, content: systemPrompt },
      ...chatSession.messages.map((msg: any) => ({
        role: msg.role.toLowerCase() as 'user' | 'assistant',
        content: msg.content
      })),
      { role: 'user' as const, content: message }
    ]

    // –í—ã–∑—ã–≤–∞–µ–º SciBox API
    const completion = await openai.chat.completions.create({
      model: MODELS.CHAT,
      messages: messages,
      stream: true,
      temperature: 0.7,
      max_tokens: 800,
    })

    // –°–æ–∑–¥–∞–µ–º streaming response
    const encoder = new TextEncoder()
    let assistantMessage = ''

    const stream = new ReadableStream({
      async start(controller) {
        try {
          for await (const chunk of completion) {
            const content = chunk.choices[0]?.delta?.content
            if (content) {
              assistantMessage += content
              controller.enqueue(
                encoder.encode(`data: ${JSON.stringify({ content })}\n\n`)
              )
            }
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
          await prisma.chatMessage.create({
            data: {
              sessionId: chatSession.id,
              role: 'ASSISTANT',
              content: assistantMessage
            }
          })

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
          const extractedData = await extractProfileDataFromResponse(
            session.user.id, 
            message, 
            assistantMessage
          )

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
          controller.enqueue(
            encoder.encode(`data: ${JSON.stringify({ 
              done: true, 
              sessionId: chatSession.id,
              extractedData
            })}\n\n`)
          )
          
          controller.close()

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ streaming:', error)
          controller.enqueue(
            encoder.encode(`data: ${JSON.stringify({ 
              error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞' 
            })}\n\n`)
          )
          controller.close()
        }
      }
    })

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/plain; charset=utf-8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
      },
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ API –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
