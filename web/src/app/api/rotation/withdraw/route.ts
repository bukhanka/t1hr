import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { Role } from '@prisma/client'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    if (session.user.role !== Role.EMPLOYEE) {
      return NextResponse.json(
        { error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–∑—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.' }, 
        { status: 403 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id },
      include: {
        rotationApplication: true
      }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    if (!profile.rotationApplication) {
      return NextResponse.json(
        { error: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é' }, 
        { status: 404 }
      )
    }

    if (profile.rotationApplication.status !== 'PENDING') {
      return NextResponse.json(
        { error: '–ú–æ–∂–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"' }, 
        { status: 400 }
      )
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ WITHDRAWN
    const updatedApplication = await prisma.rotationApplication.update({
      where: { id: profile.rotationApplication.id },
      data: {
        status: 'WITHDRAWN',
        updatedAt: new Date()
      }
    })

    console.log(`üîÑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${session.user.email} –æ—Ç–æ–∑–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é`)

    return NextResponse.json({ 
      success: true,
      message: '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω–∞',
      application: {
        id: updatedApplication.id,
        status: updatedApplication.status,
        updatedAt: updatedApplication.updatedAt
      }
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}
