import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { Role } from '@prisma/client'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    if (session.user.role !== Role.EMPLOYEE) {
      return NextResponse.json(
        { error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é.' }, 
        { status: 403 }
      )
    }

    const { reason } = await request.json()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id },
      include: {
        rotationApplication: true
      }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–ª –ª–∏ —É–∂–µ –∑–∞—è–≤–∫—É
    if (profile.rotationApplication) {
      const status = profile.rotationApplication.status
      if (status === 'PENDING') {
        return NextResponse.json(
          { error: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é' }, 
          { status: 409 }
        )
      }
      if (status === 'APPROVED') {
        return NextResponse.json(
          { error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–æ—Ç–∞—Ü–∏–∏' }, 
          { status: 409 }
        )
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤ —Ä–æ—Ç–∞—Ü–∏–∏
    if (profile.rotationStatus === 'ROTATION') {
      return NextResponse.json(
        { error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–æ—Ç–∞—Ü–∏–∏' }, 
        { status: 409 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é
    const application = await prisma.rotationApplication.create({
      data: {
        profileId: profile.id,
        reason: reason || '–•–æ—á—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è'
      },
      include: {
        profile: {
          include: {
            user: true
          }
        }
      }
    })

    console.log(`üîÑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${session.user.email} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é`)

    return NextResponse.json({ 
      success: true,
      message: '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞',
      application: {
        id: application.id,
        status: application.status,
        reason: application.reason,
        createdAt: application.createdAt
      }
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    if (session.user.role !== Role.EMPLOYEE) {
      return NextResponse.json(
        { error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, 
        { status: 403 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id },
      include: {
        rotationApplication: {
          include: {
            reviewer: true
          }
        }
      }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    return NextResponse.json({
      application: profile.rotationApplication,
      currentRotationStatus: profile.rotationStatus
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}
