import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { GamificationService } from '@/lib/gamification'
import { z } from 'zod'

const createGoalSchema = z.object({
  goalType: z.enum(['vertical_growth', 'horizontal_switch', 'skill_mastery', 'leadership']),
  target: z.string().min(1).max(100),
  priority: z.number().min(1).max(5)
})

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const body = await request.json()
    const validation = createGoalSchema.safeParse(body)
    
    if (!validation.success) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', details: validation.error.errors },
        { status: 400 }
      )
    }

    const { goalType, target, priority } = validation.data

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ü–µ–ª–∏
    const existingGoal = await prisma.careerGoal.findFirst({
      where: {
        profileId: profile.id,
        target: target
      }
    })

    if (existingGoal) {
      return NextResponse.json(
        { error: '–¶–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' }, 
        { status: 409 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—å–µ—Ä–Ω—É—é —Ü–µ–ª—å
    const careerGoal = await prisma.careerGoal.create({
      data: {
        profileId: profile.id,
        goalType,
        target,
        priority
      }
    })

    // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ü–µ–ª–∏
    const gamificationResult = await GamificationService.awardXP(
      session.user.id, 
      'CAREER_GOAL_SET',
      1
    )

    console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.user.email} –ø–æ—Å—Ç–∞–≤–∏–ª –∫–∞—Ä—å–µ—Ä–Ω—É—é —Ü–µ–ª—å: "${target}"`)

    return NextResponse.json({ 
      success: true,
      message: `–ö–∞—Ä—å–µ—Ä–Ω–∞—è —Ü–µ–ª—å "${target}" –¥–æ–±–∞–≤–ª–µ–Ω–∞`,
      careerGoal,
      xpReward: gamificationResult?.xpAwarded || 0,
      gamification: gamificationResult
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–π —Ü–µ–ª–∏:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id },
      include: {
        careerGoals: {
          orderBy: [
            { priority: 'desc' },
            { createdAt: 'desc' }
          ]
        }
      }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    return NextResponse.json(profile.careerGoals)

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}
