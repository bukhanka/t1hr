import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { GamificationService } from '@/lib/gamification'
import { z } from 'zod'

const updateStepSchema = z.object({
  status: z.enum(['pending', 'in_progress', 'completed'])
})

export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ stepId: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const { stepId } = await params
    const body = await request.json()
    const validation = updateStepSchema.safeParse(body)
    
    if (!validation.success) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', details: validation.error.errors },
        { status: 400 }
      )
    }

    const { status } = validation.data

    // –ü–æ—Å–∫–æ–ª—å–∫—É —Ä–æ–∞–¥–º–∞–ø –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, –º—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º —à–∞–≥–∏ –≤ –ë–î
    // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —à–∞–≥–∞
    if (status === 'completed') {
      const gamificationResult = await GamificationService.awardXP(
        session.user.id, 
        'MILESTONE_REACHED',
        1.2 // –ë–æ–ª—å—à–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∞–∂–Ω–æ–≥–æ —à–∞–≥–∞
      )

      console.log(`üèÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.user.email} –∑–∞–≤–µ—Ä—à–∏–ª —à–∞–≥ —Ä–æ–∞–¥–º–∞–ø–∞: ${stepId}`)
      
      return NextResponse.json({ 
        success: true,
        message: '–®–∞–≥ —Ä–æ–∞–¥–º–∞–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!',
        xpReward: gamificationResult?.xpAwarded || 0,
        gamification: gamificationResult
      })
    }

    return NextResponse.json({ 
      success: true,
      message: `–°—Ç–∞—Ç—É—Å —à–∞–≥–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${status}`,
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞ —Ä–æ–∞–¥–º–∞–ø–∞:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}
