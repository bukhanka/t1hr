import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { openai, MODELS } from '@/lib/openai'
import { z } from 'zod'

const chatRequestSchema = z.object({
  message: z.string().min(1, '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
  sessionId: z.string().optional(),
  context: z.object({
    triggerSource: z.string().optional(),
    timestamp: z.string().optional()
  }).optional()
})

function getContextualIntro(triggerSource?: string) {
  const contextIntros = {
    'profile': '–ö–û–ù–¢–ï–ö–°–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å. –ê–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–æ–≤–µ—Ç—ã –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é, —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—é XP.',
    'dashboard': '–ö–û–ù–¢–ï–ö–°–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –¥–∞—à–±–æ—Ä–¥–µ. –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ —Ä–∞–∑–≤–∏—Ç–∏—è.',
    'projects': '–ö–û–ù–¢–ï–ö–°–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã. –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.',
    'manager': '–ö–û–ù–¢–ï–ö–°–¢: –í—ã–∑–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –ø–æ–∏—Å–∫ —Ç–∞–ª–∞–Ω—Ç–æ–≤, –æ—Ü–µ–Ω–∫—É –∫–æ–º–∞–Ω–¥—ã, –ø–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.',
    'hr': '–ö–û–ù–¢–ï–ö–°–¢: –í—ã–∑–æ–≤ HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫—É, —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏, –∫–∞–¥—Ä–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã.',
    default: '–ö–û–ù–¢–ï–ö–°–¢: –û–±—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏.'
  }
  
  return contextIntros[triggerSource as keyof typeof contextIntros] || contextIntros.default
}

async function buildSystemPrompt(userId: string, context?: { triggerSource?: string }) {
  console.log('üß† Building enhanced system prompt with corporate data...')
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const profile = await prisma.profile.findUnique({
    where: { userId },
    include: {
      userSkills: {
        include: { skill: true }
      },
      userProjects: {
        include: { project: true }
      },
      careerGoals: true,
      badges: {
        include: { badge: true }
      }
    }
  })

  if (!profile) {
    return "–¢—ã - –ù–∞–≤–∏–≥–∞—Ç–æ—Ä, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏ T1. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–∞—Ä—å–µ—Ä–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏."
  }

  // –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ï –î–ê–ù–ù–´–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
  console.log('üè¢ Loading corporate opportunities...')
  
  // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5)
  const availableProjects = await prisma.project.findMany({
    where: { status: 'ACTIVE' },
    select: { 
      name: true, 
      description: true 
    },
    orderBy: { updatedAt: 'desc' },
    take: 5
  })
  
  // –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –æ—Ç–¥–µ–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  const openJobs = await prisma.jobOpening.findMany({
    where: { 
      status: 'OPEN',
      ...(profile.department ? {
        OR: [
          { department: profile.department },
          { department: { contains: 'IT' } } 
        ]
      } : {})
    },
    select: { 
      title: true, 
      department: true, 
      level: true, 
      requirements: true 
    },
    take: 4
  })
  
  // –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Ä—Å—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≤—ã–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—Ç –∏–∑—É—á–∏—Ç—å)
  const wantToLearnSkillNames = profile.userSkills
    .filter((us: any) => us.status === 'WANTS_TO_LEARN')
    .map((us: any) => us.skill.name.toLowerCase())
    
  const availableCourses = await prisma.course.findMany({
    where: { 
      status: 'ACTIVE',
      ...(wantToLearnSkillNames.length > 0 ? {
        OR: wantToLearnSkillNames.flatMap((skillName: string) => [
          { skills: { has: skillName } },
          { title: { contains: skillName, mode: 'insensitive' } }
        ])
      } : {})
    },
    select: { 
      title: true, 
      category: true, 
      level: true, 
      skills: true, 
      xpReward: true 
    },
    take: 5
  })
  
  // –ú–µ–Ω—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã 
  const mentorPrograms = await prisma.mentorProgram.findMany({
    where: { 
      status: 'ACTIVE',
      ...(wantToLearnSkillNames.length > 0 ? {
        skills: {
          hasSome: wantToLearnSkillNames
        }
      } : {})
    },
    select: { 
      title: true, 
      description: true, 
      skills: true 
    },
    take: 3
  })
  
  console.log(`üìä Loaded: ${availableProjects.length} projects, ${openJobs.length} jobs, ${availableCourses.length} courses, ${mentorPrograms.length} mentor programs`)
  
  // –õ–ò–ß–ù–´–ï –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø  
  const currentSkills = profile.userSkills
    .filter((us: any) => us.status === 'USING')
    .map((us: any) => `${us.skill.name} (—É—Ä–æ–≤–µ–Ω—å ${us.level}/5)`)
    .join(', ')

  const wantToLearnSkills = profile.userSkills
    .filter((us: any) => us.status === 'WANTS_TO_LEARN')
    .map((us: any) => us.skill.name)
    .join(', ')

  const recentProjects = profile.userProjects
    .filter((up: any) => up.achievements)
    .slice(0, 3)
    .map((up: any) => `${up.project.name} (—Ä–æ–ª—å: ${up.roleInProject}, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${up.achievements})`)
    .join('; ')

  const careerGoals = profile.careerGoals
    .map((cg: any) => `${cg.goalType}: ${cg.target}`)
    .join('; ')

  const recentBadges = profile.badges
    .slice(0, 3)
    .map((ub: any) => ub.badge.name)
    .join(', ')

  const contextualIntro = getContextualIntro(context?.triggerSource)

  return `–¢—ã - –ù–∞–≤–∏–≥–∞—Ç–æ—Ä, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏ T1. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏.

${contextualIntro}

–í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
- –¢—ã –¥—Ä—É–∂–µ–ª—é–±–µ–Ω, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–µ–Ω
- –í—Å–µ–≥–¥–∞ –æ—Å–Ω–æ–≤—ã–≤–∞–π —Å–æ–≤–µ—Ç—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
- –†–µ–∫–æ–º–µ–Ω–¥—É–π –¢–û–õ–¨–ö–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –Ω–∏–∂–µ
- –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã, –∫—É—Ä—Å—ã –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
- –ú–æ—Ç–∏–≤–∏—Ä—É–π –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è XP –∏ –±–µ–π–¥–∂–µ–π
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

–î–ê–ù–ù–´–ï –û –°–û–¢–†–£–î–ù–ò–ö–ï:
- –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${profile.jobTitle || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
- –û—Ç–¥–µ–ª: ${profile.department || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
- –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${profile.level} (${profile.xp} XP)
- –°–∏–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è: ${profile.profileStrength}%

–ù–ê–í–´–ö–ò:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: ${currentSkills || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
- –•–æ—á–µ—Ç –∏–∑—É—á–∏—Ç—å: ${wantToLearnSkills || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}

–û–ü–´–¢:
- –ù–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã: ${recentProjects || '–Ω–µ –æ–ø–∏—Å–∞–Ω—ã'}

–ö–ê–†–¨–ï–†–ù–´–ï –¶–ï–õ–ò:
- ${careerGoals || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}

–ù–ï–î–ê–í–ù–ò–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:
- –ë–µ–π–¥–∂–∏: ${recentBadges || '–Ω–µ—Ç'}

üè¢ –î–û–°–¢–£–ü–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –í –ö–û–ú–ü–ê–ù–ò–ò:

üìã –ê–ö–¢–ò–í–ù–´–ï –ü–†–û–ï–ö–¢–´ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–π —ç—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã):
${availableProjects.map((p: any) => `- "${p.name}": ${p.description || '–ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤'}`).join('\n')}

üíº –û–¢–ö–†–´–¢–´–ï –í–ê–ö–ê–ù–°–ò–ò (—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞):
${openJobs.map((j: any) => `- "${j.title}" (${j.department}, ${j.level}) - —Ç—Ä–µ–±—É–µ—Ç: ${j.requirements.join(', ')}`).join('\n')}

üìö –î–û–°–¢–£–ü–ù–´–ï –ö–£–†–°–´ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤):
${availableCourses.map((c: any) => `- "${c.title}" (${c.category}, ${c.level}) - —Ä–∞–∑–≤–∏–≤–∞–µ—Ç: ${c.skills.join(', ')} [+${c.xpReward} XP]`).join('\n')}

üë• –ú–ï–ù–¢–û–†–°–ö–ò–ï –ü–†–û–ì–†–ê–ú–ú–´:
${mentorPrograms.map((m: any) => `- "${m.title}": ${m.description} (–Ω–∞–≤—ã–∫–∏: ${m.skills.join(', ')})`).join('\n')}

–°–ü–û–°–û–ë–´ –ü–û–õ–£–ß–ï–ù–ò–Ø XP:
- –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö: +100-200 XP
- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞: +${availableCourses[0]?.xpReward || 50} XP
- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞: +50 XP
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞: +25 XP
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π: +30 XP

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –û–¢–í–ï–¢–û–í:
1. –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω —Å–ª–∞–±–æ (< 60%) - –º–æ—Ç–∏–≤–∏—Ä—É–π –µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å
2. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–π –∏—Ö –∑–∞–ø–æ–ª–Ω–∏—Ç—å
3. –†–µ–∫–æ–º–µ–Ω–¥—É–π –ö–û–ù–ö–†–ï–¢–ù–´–ï –ø—Ä–æ–µ–∫—Ç—ã –∏ –∫—É—Ä—Å—ã –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –≤—ã—à–µ
4. –£–ø–æ–º–∏–Ω–∞–π —Ç–æ—á–Ω—ã–µ —Å—É–º–º—ã XP –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è
5. –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —Ä–æ—Å—Ç–∞

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞.`
}

export async function POST(request: NextRequest) {
  try {
    console.log('ü§ñ AI Chat API called')
    
    const session = await getServerSession(authOptions)
    console.log('üìù Session check:', { hasSession: !!session, userId: session?.user?.id })
    
    if (!session?.user?.id) {
      console.log('‚ùå No session or user ID')
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const body = await request.json()
    console.log('üì¶ Request body:', JSON.stringify(body, null, 2))
    
    const validation = chatRequestSchema.safeParse(body)
    console.log('‚úÖ Validation result:', { success: validation.success })
    
    if (!validation.success) {
      console.log('‚ùå Validation failed:', validation.error.errors)
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', details: validation.error.errors },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º SCIBOX_API_KEY
    console.log('üîë SCIBOX_API_KEY exists:', !!process.env.SCIBOX_API_KEY)
    console.log('üîë SCIBOX_API_KEY first 10 chars:', process.env.SCIBOX_API_KEY?.substring(0, 10) + '...')
    console.log('üåê SCIBOX_API_BASE_URL:', process.env.SCIBOX_API_BASE_URL)

    const { message, sessionId, context } = validation.data
    console.log('üìù Extracted data:', { message: message.substring(0, 50) + '...', sessionId, context })

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
    let chatSession
    if (sessionId) {
      console.log('üîç Searching for existing session:', sessionId)
      console.log('üîç Current user ID:', session.user.id)
      
      chatSession = await prisma.chatSession.findUnique({
        where: { id: sessionId },
        include: { messages: { orderBy: { createdAt: 'asc' } } }
      })
      
      console.log('üîç Found chatSession:', chatSession ? {
        id: chatSession.id,
        profileId: chatSession.profileId,
        messagesCount: chatSession.messages.length
      } : 'null')
      
      if (!chatSession) {
        console.log('‚ùå ChatSession not found in DB')
        return NextResponse.json(
          { error: '–°–µ—Å—Å–∏—è —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
          { status: 404 }
        )
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      const userProfile = await prisma.profile.findUnique({
        where: { userId: session.user.id }
      })
      
      console.log('üîç User profile:', userProfile ? {
        id: userProfile.id,
        userId: userProfile.userId
      } : 'null')
      
      if (!userProfile || chatSession.profileId !== userProfile.id) {
        console.log('‚ùå Session ownership check failed:', {
          chatSessionProfileId: chatSession.profileId,
          userProfileId: userProfile?.id,
          sessionUserId: session.user.id
        })
        return NextResponse.json(
          { error: '–°–µ—Å—Å–∏—è —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
          { status: 404 }
        )
      }
      
      console.log('‚úÖ Session ownership verified')
    } else {
      console.log('üÜï Creating new chat session for user:', session.user.id)
      
      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let profile = await prisma.profile.findUnique({
        where: { userId: session.user.id }
      })
      
      console.log('üîç Existing profile:', profile ? {
        id: profile.id,
        userId: profile.userId
      } : 'null')

      if (!profile) {
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Ñ–∏–ª—å
        let user = await prisma.user.findUnique({
          where: { id: session.user.id }
        })

        if (!user) {
          user = await prisma.user.create({
            data: {
              id: session.user.id,
              email: session.user.email || '',
              name: session.user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
              role: (session.user as any).role || 'EMPLOYEE'
            }
          })
        }

        profile = await prisma.profile.create({
          data: {
            userId: user.id,
            xp: 50,
            level: 1,
            profileStrength: 20
          }
        })
      }

      console.log('üÜï Creating new chat session with profile ID:', profile.id)
      
      chatSession = await prisma.chatSession.create({
        data: {
          profileId: profile.id,
          title: message.substring(0, 50) + (message.length > 50 ? '...' : ''),
          messages: {
            create: {
              role: 'USER',
              content: message
            }
          }
        },
        include: { messages: { orderBy: { createdAt: 'asc' } } }
      })
      
      console.log('‚úÖ Created new chat session:', {
        id: chatSession.id,
        profileId: chatSession.profileId,
        messagesCount: chatSession.messages.length
      })
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (sessionId) {
      await prisma.chatMessage.create({
        data: {
          sessionId: chatSession.id,
          role: 'USER',
          content: message
        }
      })
    }

    // –°—Ç—Ä–æ–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
    console.log('üß† Building system prompt for user:', session.user.id)
    const systemPrompt = await buildSystemPrompt(session.user.id, context)
    console.log('üß† System prompt length:', systemPrompt.length)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenAI
    const messages = [
      { role: 'system' as const, content: systemPrompt },
      ...chatSession.messages.map((msg: any) => ({
        role: msg.role.toLowerCase() as 'user' | 'assistant',
        content: msg.content
      })),
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      ...(sessionId ? [{ role: 'user' as const, content: message }] : [])
    ]

    console.log('üí¨ Messages prepared:', messages.length, 'messages')
    console.log('üöÄ Calling SciBox API with model:', MODELS.CHAT)

    // –í—ã–∑—ã–≤–∞–µ–º SciBox API
    const completion = await openai.chat.completions.create({
      model: MODELS.CHAT,
      messages: messages,
      stream: true,
      temperature: 0.7,
      max_tokens: 1000,
    })

    console.log('‚úÖ SciBox API call successful, got completion object')

    // –°–æ–∑–¥–∞–µ–º streaming response
    const encoder = new TextEncoder()
    let assistantMessage = ''

    const stream = new ReadableStream({
      async start(controller) {
        try {
          for await (const chunk of completion) {
            const content = chunk.choices[0]?.delta?.content
            if (content) {
              assistantMessage += content
              controller.enqueue(
                encoder.encode(`data: ${JSON.stringify({ content })}\n\n`)
              )
            }
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î
          await prisma.chatMessage.create({
            data: {
              sessionId: chatSession.id,
              role: 'ASSISTANT',
              content: assistantMessage
            }
          })

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å sessionId
          controller.enqueue(
            encoder.encode(`data: ${JSON.stringify({ 
              done: true, 
              sessionId: chatSession.id 
            })}\n\n`)
          )
          
          controller.close()
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ streaming:', error)
          controller.enqueue(
            encoder.encode(`data: ${JSON.stringify({ 
              error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞' 
            })}\n\n`)
          )
          controller.close()
        }
      }
    })

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/plain; charset=utf-8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
      },
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ AI chat API:', error)
    console.error('‚ùå Error type:', error?.constructor?.name)
    console.error('‚ùå Error message:', (error as any)?.message)
    console.error('‚ùå Stack trace:', (error as any)?.stack)
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 400
    if ((error as any)?.message?.includes('validation') || (error as any)?.message?.includes('invalid')) {
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', details: (error as any).message },
        { status: 400 }
      )
    }
    
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: (error as any)?.message || 'Unknown error' },
      { status: 500 }
    )
  }
}
