import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { LeaderboardType } from '@/lib/leaderboard'

interface LeaderboardInfo {
  type: LeaderboardType
  title: string
  description: string
  icon: string
  period: string
  updateFrequency: string
}

const LEADERBOARD_CONFIGS: LeaderboardInfo[] = [
  {
    type: 'tcoins_weekly',
    title: 'T-Coins –∑–∞ –Ω–µ–¥–µ–ª—é',
    description: '–ö—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ—Ö –∑–∞—Ä–∞–±–æ—Ç–∞–ª T-Coins –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ',
    icon: 'üèÜ',
    period: 'weekly',
    updateFrequency: '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏'
  },
  {
    type: 'tcoins_monthly',
    title: 'T-Coins –∑–∞ –º–µ—Å—è—Ü',
    description: '–¢–æ–ø –∑–∞—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ T-Coins –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ',
    icon: 'üí∞',
    period: 'monthly', 
    updateFrequency: '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
  },
  {
    type: 'tcoins_alltime',
    title: 'T-Coins –≤—Å–µ –≤—Ä–µ–º—è',
    description: '–õ–µ–≥–µ–Ω–¥—ã T1 –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö T-Coins',
    icon: 'üëë',
    period: 'all_time',
    updateFrequency: '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞'
  },
  {
    type: 'xp_weekly', 
    title: 'XP –∑–∞ –Ω–µ–¥–µ–ª—é',
    description: '–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ',
    icon: '‚ö°',
    period: 'weekly',
    updateFrequency: '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏'
  },
  {
    type: 'xp_monthly',
    title: 'XP –∑–∞ –º–µ—Å—è—Ü', 
    description: '–õ–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –∑–∞ –º–µ—Å—è—Ü',
    icon: 'üöÄ',
    period: 'monthly',
    updateFrequency: '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
  },
  {
    type: 'profile_strength',
    title: '–°–∏–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è',
    description: '–£ –∫–æ–≥–æ —Å–∞–º—ã–π –ø–æ–ª–Ω—ã–π –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
    icon: 'üí™',
    period: 'all_time',
    updateFrequency: '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤'
  },
  {
    type: 'activity_weekly',
    title: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏',
    description: '–°–∞–º—ã–µ –≤–æ–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
    icon: 'üî•',
    period: 'weekly',
    updateFrequency: '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏'
  }
]

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbLeaderboards = await prisma.leaderboard.findMany({
      where: {
        validUntil: { gt: new Date() } // –¢–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ
      },
      select: {
        type: true,
        period: true,
        data: true
      }
    })

    let leaderboardConfigs: LeaderboardInfo[] = []
    
    if (dbLeaderboards.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      leaderboardConfigs = dbLeaderboards.map(lb => {
        const data = lb.data as any
        const config = data.config || {}
        
        return {
          type: lb.type as LeaderboardType,
          title: config.title || lb.type,
          description: config.description || '',
          icon: config.icon || 'üèÜ',
          period: lb.period,
          updateFrequency: config.updateFrequency || '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏'
        }
      })
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      leaderboardConfigs = LEADERBOARD_CONFIGS
    }

    return NextResponse.json({
      leaderboards: leaderboardConfigs,
      total: leaderboardConfigs.length,
      categories: {
        tcoins: leaderboardConfigs.filter(l => l.type.includes('tcoins')),
        xp: leaderboardConfigs.filter(l => l.type.includes('xp')),
        other: leaderboardConfigs.filter(l => !l.type.includes('tcoins') && !l.type.includes('xp'))
      }
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
