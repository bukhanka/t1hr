import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { GamificationService } from '@/lib/gamification'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const { projectId } = await request.json()

    if (!projectId) {
      return NextResponse.json(
        { error: 'ID –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, 
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    const project = await prisma.project.findUnique({
      where: { id: projectId }
    })

    if (!project) {
      return NextResponse.json(
        { error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    if (project.status !== 'ACTIVE') {
      return NextResponse.json(
        { error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É—á–∞—Å—Ç–∏—è' }, 
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ä–∞–∑–∏–ª –ª–∏ —É–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–µ–∫—Ç—É
    const existingInterest = await prisma.userProject.findFirst({
      where: {
        profileId: profile.id,
        projectId: projectId
      }
    })

    if (existingInterest) {
      return NextResponse.json(
        { error: '–í—ã —É–∂–µ –≤—ã—Ä–∞–∑–∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É' }, 
        { status: 409 }
      )
    }

    // –í—ã—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–µ–∫—Ç—É
    const userProject = await prisma.userProject.create({
      data: {
        profileId: profile.id,
        projectId: projectId,
        roleInProject: 'PARTICIPANT'
      },
      include: {
        project: true
      }
    })

    // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
    const gamificationResult = await GamificationService.awardXP(
      session.user.id, 
      'PROJECT_ADDED',
      0.5
    )

    console.log(`üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.user.email} –≤—ã—Ä–∞–∑–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–µ–∫—Ç—É "${project.name}"`)

    return NextResponse.json({ 
      success: true,
      message: `–ò–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–µ–∫—Ç—É "${project.name}" –≤—ã—Ä–∞–∂–µ–Ω`,
      userProject,
      gamification: gamificationResult
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}