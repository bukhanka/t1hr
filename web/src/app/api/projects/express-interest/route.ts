import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'

// –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã (–ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏)
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥–∞–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ ProjectInterest –∏–ª–∏ –ø–æ–¥–æ–±–Ω–∞—è
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const { projectId } = await request.json()

    if (!projectId) {
      return NextResponse.json(
        { error: 'ID –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, 
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    const project = await prisma.project.findUnique({
      where: { id: projectId }
    })

    if (!project) {
      return NextResponse.json(
        { error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    if (project.status !== 'ACTIVE') {
      return NextResponse.json(
        { error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' }, 
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    const existingParticipation = await prisma.userProject.findUnique({
      where: {
        profileId_projectId: {
          profileId: profile.id,
          projectId: projectId
        }
      }
    })

    if (existingParticipation) {
      return NextResponse.json(
        { error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ' }, 
        { status: 409 }
      )
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å –±—ã –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    // –î–ª—è –¥–µ–º–æ –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ UserProject —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É ProjectApplications
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ: —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –ø–æ–º–µ—Ç–∫–æ–π —á—Ç–æ —ç—Ç–æ –∑–∞—è–≤–∫–∞
    const interest = await prisma.userProject.create({
      data: {
        profileId: profile.id,
        projectId: projectId,
        roleInProject: '–ó–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ',
        achievements: null, // –ü—É—Å—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —É—á–∞—Å—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å
        startDate: null,
        endDate: null
      },
      include: {
        project: true
      }
    })

    console.log(`üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.user.email} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç "${project.name}"`)

    return NextResponse.json({ 
      success: true,
      message: `–ó–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ "${project.name}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`,
      interest
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}
