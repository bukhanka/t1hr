import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { SmartRankingService } from '@/lib/smart-ranking'

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    // –¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (session.user.role !== 'EMPLOYEE') {
      return NextResponse.json(
        { error: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º' },
        { status: 403 }
      )
    }

    const { searchParams } = new URL(request.url)
    const type = searchParams.get('type') // 'courses', 'projects', 'jobs', 'mentors', 'all'

    console.log(`üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è ${session.user.id}`)

    const recommendations = await SmartRankingService.getPersonalizedRecommendations(session.user.id)

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (type && type !== 'all') {
      const filtered = {
        [type]: recommendations[type as keyof typeof recommendations] || []
      }
      
      return NextResponse.json({
        recommendations: filtered,
        type,
        algorithm: 'smart_ranking',
        timestamp: new Date()
      })
    }

    return NextResponse.json({
      recommendations,
      type: 'all',
      algorithm: 'smart_ranking',
      timestamp: new Date(),
      summary: {
        totalCourses: recommendations.courses.length,
        totalProjects: recommendations.projects.length,
        totalJobs: recommendations.jobs.length,
        totalMentors: recommendations.mentors.length
      }
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
