import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const { courseId } = await request.json()

    if (!courseId) {
      return NextResponse.json(
        { error: 'ID –∫—É—Ä—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, 
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –æ –∫—É—Ä—Å–µ
    const enrollment = await prisma.userCourse.findUnique({
      where: {
        profileId_courseId: {
          profileId: profile.id,
          courseId: courseId
        }
      },
      include: {
        course: true
      }
    })

    if (!enrollment) {
      return NextResponse.json(
        { error: '–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å' }, 
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–æ–∑–≤–∞—Ç—å –∑–∞—è–≤–∫—É
    if (enrollment.status === 'COMPLETED') {
      return NextResponse.json(
        { error: '–ù–µ–ª—å–∑—è –æ—Ç–æ–∑–≤–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∫—É—Ä—Å' }, 
        { status: 400 }
      )
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∫—É—Ä—Å–µ
    await prisma.userCourse.delete({
      where: {
        profileId_courseId: {
          profileId: profile.id,
          courseId: courseId
        }
      }
    })

    console.log(`üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.user.email} –æ—Ç–æ–∑–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –∫—É—Ä—Å "${enrollment.course.title}"`)

    return NextResponse.json({ 
      success: true,
      message: `–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å "${enrollment.course.title}" –æ—Ç–æ–∑–≤–∞–Ω–∞`
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—É—Ä—Å:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}
