import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { GamificationService } from '@/lib/gamification'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, 
        { status: 401 }
      )
    }

    const { courseId } = await request.json()

    if (!courseId) {
      return NextResponse.json(
        { error: 'ID –∫—É—Ä—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, 
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
    const course = await prisma.course.findUnique({
      where: { id: courseId }
    })

    if (!course) {
      return NextResponse.json(
        { error: '–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    if (course.status !== 'ACTIVE') {
      return NextResponse.json(
        { error: '–ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏' }, 
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await prisma.profile.findUnique({
      where: { userId: session.user.id }
    })

    if (!profile) {
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, 
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –Ω–∞ –∫—É—Ä—Å
    const existingEnrollment = await prisma.userCourse.findUnique({
      where: {
        profileId_courseId: {
          profileId: profile.id,
          courseId: courseId
        }
      }
    })

    if (existingEnrollment) {
      return NextResponse.json(
        { error: '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å' }, 
        { status: 409 }
      )
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –∫—É—Ä—Å
    const enrollment = await prisma.userCourse.create({
      data: {
        profileId: profile.id,
        courseId: courseId,
        status: 'PLANNED',
        progress: 0
      },
      include: {
        course: true
      }
    })

    // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å
    const gamificationResult = await GamificationService.awardXP(
      session.user.id, 
      'SKILL_ADDED', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
      0.5 // –ü–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç –æ–±—ã—á–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—å
    )

    console.log(`üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.user.email} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫—É—Ä—Å "${course.title}"`)

    return NextResponse.json({ 
      success: true,
      message: `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å "${course.title}"`,
      enrollment,
      gamification: gamificationResult
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, 
      { status: 500 }
    )
  }
}
