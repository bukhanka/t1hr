/**
 * –ü—Ä–æ—Å—Ç–æ–µ, –Ω–æ —É–º–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

interface CacheItem<T> {
  data: T
  timestamp: number
  ttl: number
}

class SmartCache {
  private cache = new Map<string, CacheItem<any>>()
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
   */
  get<T>(key: string): T | null {
    const item = this.cache.get(key)
    
    if (!item) {
      return null
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
    if (Date.now() - item.timestamp > item.ttl) {
      this.cache.delete(key)
      return null
    }
    
    return item.data
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
   */
  set<T>(key: string, data: T, ttlMinutes: number = 5): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl: ttlMinutes * 60 * 1000
    })
  }
  
  /**
   * –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫—ç—à–∞
   */
  delete(key: string): void {
    this.cache.delete(key)
  }
  
  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
   */
  clear(): void {
    this.cache.clear()
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getStats() {
    return {
      size: this.cache.size,
      keys: Array.from(this.cache.keys())
    }
  }
  
  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
   */
  cleanup(): void {
    const now = Date.now()
    for (const [key, item] of this.cache.entries()) {
      if (now - item.timestamp > item.ttl) {
        this.cache.delete(key)
      }
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
export const smartCache = new SmartCache()

// –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
  smartCache.cleanup()
}, 10 * 60 * 1000)

/**
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
 */
export function cached<T extends (...args: any[]) => Promise<any>>(
  ttlMinutes: number = 5
) {
  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    const originalMethod = descriptor.value
    
    descriptor.value = async function (...args: any[]) {
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –∏–∑ –∏–º–µ–Ω–∏ –º–µ—Ç–æ–¥–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
      const cacheKey = `${propertyKey}:${JSON.stringify(args)}`
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cached = smartCache.get(cacheKey)
      if (cached !== null) {
        console.log(`üéØ –ö—ç—à HIT –¥–ª—è ${propertyKey}`)
        return cached
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
      console.log(`üîÑ –ö—ç—à MISS –¥–ª—è ${propertyKey}`)
      const result = await originalMethod.apply(this, args)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      smartCache.set(cacheKey, result, ttlMinutes)
      
      return result
    }
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π –∫—ç—à–∞
 */
export function createCacheKey(prefix: string, ...params: any[]): string {
  return `${prefix}:${params.map(p => 
    typeof p === 'object' ? JSON.stringify(p) : String(p)
  ).join(':')}`
}

/**
 * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
 */
export async function cacheWithRefresh<T>(
  key: string,
  fetcher: () => Promise<T>,
  ttlMinutes: number = 5
): Promise<T> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cached = smartCache.get<T>(key)
  if (cached !== null) {
    return cached
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
  const data = await fetcher()
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
  smartCache.set(key, data, ttlMinutes)
  
  return data
}
