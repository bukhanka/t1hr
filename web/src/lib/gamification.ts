import { prisma } from './prisma'

export type GamificationEvent = 
  | 'PROFILE_CREATED'
  | 'SKILL_ADDED'
  | 'SKILL_VERIFIED'
  | 'PROJECT_ADDED'
  | 'PROJECT_ACHIEVEMENT_ADDED'
  | 'CAREER_GOAL_SET'
  | 'PROFILE_UPDATED'
  | 'CHAT_WITH_AI'

type XPRewards = Record<GamificationEvent, number>

const XP_REWARDS: XPRewards = {
  PROFILE_CREATED: 50,
  SKILL_ADDED: 25,
  SKILL_VERIFIED: 75,
  PROJECT_ADDED: 100,
  PROJECT_ACHIEVEMENT_ADDED: 150,
  CAREER_GOAL_SET: 50,
  PROFILE_UPDATED: 25,
  CHAT_WITH_AI: 10
}

// –¢–∞–±–ª–∏—Ü–∞ —É—Ä–æ–≤–Ω–µ–π –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π XP
const LEVEL_REQUIREMENTS = [
  { level: 1, minXp: 0, title: 'Newcomer' },
  { level: 2, minXp: 300, title: 'Junior' },
  { level: 3, minXp: 800, title: 'Middle' },
  { level: 4, minXp: 1500, title: 'Senior' },
  { level: 5, minXp: 2500, title: 'Expert' },
  { level: 6, minXp: 4000, title: 'Principal' }
]

export class GamificationService {
  static async awardXP(userId: string, event: GamificationEvent, multiplier: number = 1) {
    try {
      const profile = await prisma.profile.findUnique({
        where: { userId }
      })

      if (!profile) {
        console.error(`–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
        return null
      }

      const xpReward = Math.floor(XP_REWARDS[event] * multiplier)
      const newXp = profile.xp + xpReward
      
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
      const newLevel = this.calculateLevel(newXp)
      const oldLevel = profile.level

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const updatedProfile = await prisma.profile.update({
        where: { userId },
        data: {
          xp: newXp,
          level: newLevel
        }
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –±–µ–π–¥–∂–µ–π
      await this.checkAndAwardBadges(userId, event)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
      const levelUp = newLevel > oldLevel

      return {
        xpAwarded: xpReward,
        totalXp: newXp,
        newLevel,
        levelUp,
        event
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ XP:', error)
      return null
    }
  }

  static calculateLevel(xp: number): number {
    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç XP
    for (let i = LEVEL_REQUIREMENTS.length - 1; i >= 0; i--) {
      if (xp >= LEVEL_REQUIREMENTS[i].minXp) {
        return LEVEL_REQUIREMENTS[i].level
      }
    }
    return 1
  }

  static getLevelInfo(level: number) {
    const current = LEVEL_REQUIREMENTS.find(req => req.level === level)
    const next = LEVEL_REQUIREMENTS.find(req => req.level === level + 1)
    
    return {
      current,
      next,
      hasNext: !!next
    }
  }

  static async checkAndAwardBadges(userId: string, event: GamificationEvent) {
    const profile = await prisma.profile.findUnique({
      where: { userId },
      include: {
        userSkills: {
          include: { skill: true }
        },
        userProjects: true,
        badges: {
          include: { badge: true }
        }
      }
    })

    if (!profile) return

    const awardedBadgeNames = profile.badges.map(ub => ub.badge.name)
    const badgesToAward: string[] = []

    // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –±–µ–π–¥–∂–µ–π
    switch (event) {
      case 'PROFILE_CREATED':
        if (!awardedBadgeNames.includes('–ù–æ–≤–∏—á–æ–∫')) {
          badgesToAward.push('–ù–æ–≤–∏—á–æ–∫')
        }
        break

      case 'SKILL_ADDED':
        // –ü–æ–ª–∏–≥–ª–æ—Ç - 5+ –Ω–∞–≤—ã–∫–æ–≤
        if (profile.userSkills.length >= 5 && !awardedBadgeNames.includes('–ü–æ–ª–∏–≥–ª–æ—Ç')) {
          badgesToAward.push('–ü–æ–ª–∏–≥–ª–æ—Ç')
        }
        break

      case 'PROJECT_ACHIEVEMENT_ADDED':
        // –ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å - 5+ –æ–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        const projectsWithAchievements = profile.userProjects.filter(p => p.achievements)
        if (projectsWithAchievements.length >= 5 && !awardedBadgeNames.includes('–ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å')) {
          badgesToAward.push('–ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å')
        }
        // –ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫ - 3+ –ø—Ä–æ–µ–∫—Ç–∞
        if (profile.userProjects.length >= 3 && !awardedBadgeNames.includes('–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫')) {
          badgesToAward.push('–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫')
        }
        break

      case 'PROFILE_UPDATED':
        // –ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ - –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
        if (!awardedBadgeNames.includes('–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫')) {
          badgesToAward.push('–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫')
        }
        // –ú–∞—Å—Ç–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è - –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ 90%+
        if (profile.profileStrength >= 90 && !awardedBadgeNames.includes('–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è')) {
          badgesToAward.push('–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è')
        }
        break

      case 'SKILL_VERIFIED':
        // –ú–µ–Ω—Ç–æ—Ä - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞
        const mentorSkills = profile.userSkills.filter(us => 
          us.skill && us.skill.name.toLowerCase().includes('–º–µ–Ω—Ç–æ—Ä') && us.isVerified
        )
        if (mentorSkills.length > 0 && !awardedBadgeNames.includes('–ú–µ–Ω—Ç–æ—Ä')) {
          badgesToAward.push('–ú–µ–Ω—Ç–æ—Ä')
        }
        break
    }

    // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –±–µ–π–¥–∂–∞–º–∏
    for (const badgeName of badgesToAward) {
      await this.awardBadge(userId, badgeName)
    }
  }

  static async awardBadge(userId: string, badgeName: string) {
    try {
      const profile = await prisma.profile.findUnique({
        where: { userId }
      })

      if (!profile) return

      // –ù–∞—Ö–æ–¥–∏–º –±–µ–π–¥–∂
      const badge = await prisma.badge.findUnique({
        where: { name: badgeName }
      })

      if (!badge) {
        console.error(`–ë–µ–π–¥–∂ "${badgeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`)
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–µ–π–¥–∂ –µ—â–µ –Ω–µ –≤—ã–¥–∞–Ω
      const existingUserBadge = await prisma.userBadge.findUnique({
        where: {
          profileId_badgeId: {
            profileId: profile.id,
            badgeId: badge.id
          }
        }
      })

      if (existingUserBadge) return // –£–∂–µ –µ—Å—Ç—å

      // –í—ã–¥–∞–µ–º –±–µ–π–¥–∂
      await prisma.userBadge.create({
        data: {
          profileId: profile.id,
          badgeId: badge.id
        }
      })

      // –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π XP –∑–∞ –±–µ–π–¥–∂
      if (badge.xpReward > 0) {
        await prisma.profile.update({
          where: { userId },
          data: {
            xp: { increment: badge.xpReward }
          }
        })
      }

      console.log(`üèÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ª—É—á–∏–ª –±–µ–π–¥–∂ "${badgeName}" (+${badge.xpReward} XP)`)

      return badge

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –±–µ–π–¥–∂–∞:', error)
    }
  }

  static async getNextBestAction(userId: string): Promise<string | null> {
    const profile = await prisma.profile.findUnique({
      where: { userId },
      include: {
        userSkills: true,
        userProjects: {
          include: { project: true }
        },
        careerGoals: true
      }
    })

    if (!profile) return null

    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª—É—á—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–≤—ã–∫–æ–≤ - –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏
    if (profile.userSkills.length === 0) {
      return "–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å (+25 XP –∑–∞ –∫–∞–∂–¥—ã–π)"
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –±–µ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const projectsWithoutAchievements = profile.userProjects.filter(p => !p.achievements)
    if (projectsWithoutAchievements.length > 0) {
      const project = projectsWithoutAchievements[0]
      return `–û–ø–∏—à–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ "${project.project.name}" (+150 XP)`
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π - –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö
    if (profile.careerGoals.length === 0) {
      return "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏ (+50 XP)"
    }

    // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å–ª–∞–±–æ –∑–∞–ø–æ–ª–Ω–µ–Ω
    if (profile.profileStrength < 60) {
      return "–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–æ 60% –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–π–¥–∂–∞ '–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫'"
    }

    // –ï—Å–ª–∏ –º–∞–ª–æ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –ø–æ–ª–∏–≥–ª–æ—Ç–∞
    if (profile.userSkills.length < 5) {
      return `–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ ${5 - profile.userSkills.length} –Ω–∞–≤—ã–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–π–¥–∂–∞ '–ü–æ–ª–∏–≥–ª–æ—Ç'`
    }

    return "–ü–æ–æ–±—â–∞–π—Ç–µ—Å—å —Å –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (+10 XP)"
  }
}
