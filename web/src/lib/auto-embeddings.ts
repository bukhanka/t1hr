/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
 */

import { VectorizationService } from './vectorization'
import { prisma } from './prisma'

/**
 * –•—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
 */
export class AutoEmbeddingService {
  
  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ñ–æ–Ω–µ
   */
  static async scheduleEmbeddingUpdate(profileId: string, delay: number = 2000) {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(async () => {
      try {
        console.log(`üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}`)
        const success = await VectorizationService.updateProfileEmbedding(profileId)
        
        if (success) {
          console.log(`‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}`)
        } else {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}`)
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è ${profileId}:`, error)
      }
    }, delay)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª—è
   */
  static async shouldUpdateEmbedding(profileId: string): Promise<boolean> {
    try {
      const result = await prisma.$queryRaw<Array<{ 
        embedding_exists: boolean,
        text_changed: boolean 
      }>>`
        SELECT 
          (embedding IS NOT NULL) as embedding_exists,
          (
            "embeddingText" IS NULL OR 
            "updatedAt" > (
              SELECT MAX("updatedAt") 
              FROM "Profile" p2 
              WHERE p2.id = ${profileId} AND p2."embeddingText" IS NOT NULL
            )
          ) as text_changed
        FROM "Profile" 
        WHERE id = ${profileId}
      `

      const row = result[0]
      if (!row) return true

      // –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è
      return !row.embedding_exists || row.text_changed
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞:', error)
      return true // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª—É—á—à–µ –æ–±–Ω–æ–≤–∏—Ç—å
    }
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –±–µ–∑ –Ω–∏—Ö
   */
  static async initializeMissingEmbeddings(): Promise<{
    total: number,
    processed: number,
    errors: number
  }> {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...')

    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
      const profilesNeedingEmbeddings = await prisma.$queryRaw<Array<{ id: string }>>`
        SELECT p.id
        FROM "Profile" p
        JOIN "User" u ON p."userId" = u.id
        WHERE u.role = 'EMPLOYEE' 
          AND p.embedding IS NULL
        ORDER BY p."updatedAt" DESC
        LIMIT 50
      `

      const total = profilesNeedingEmbeddings.length
      let processed = 0
      let errors = 0

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${total} –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`)

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      for (const profile of profilesNeedingEmbeddings) {
        try {
          const success = await VectorizationService.updateProfileEmbedding(profile.id)
          
          if (success) {
            processed++
            console.log(`‚úÖ ${processed}/${total}: –ü—Ä–æ—Ñ–∏–ª—å ${profile.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω`)
          } else {
            errors++
            console.log(`‚ö†Ô∏è ${processed + errors}/${total}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${profile.id}`)
          }
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API
          await new Promise(resolve => setTimeout(resolve, 1000))
          
        } catch (error) {
          errors++
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è ${profile.id}:`, error)
        }
      }

      const result = { total, processed, errors }
      console.log(`üèÅ –ú–∞—Å—Å–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, result)
      
      return result

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
      return { total: 0, processed: 0, errors: 1 }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
   */
  static async getEmbeddingCoverage(): Promise<{
    total: number,
    withEmbeddings: number,
    percentage: number,
    lastUpdate: Date | null
  }> {
    try {
      const stats = await prisma.$queryRaw<Array<{
        total: bigint,
        with_embeddings: bigint,
        last_update: Date | null
      }>>`
        SELECT 
          COUNT(*) as total,
          COUNT(p.embedding) as with_embeddings,
          MAX(p."updatedAt") as last_update
        FROM "Profile" p
        JOIN "User" u ON p."userId" = u.id
        WHERE u.role = 'EMPLOYEE'
      `

      const row = stats[0]
      const total = Number(row?.total || 0)
      const withEmbeddings = Number(row?.with_embeddings || 0)
      const percentage = total > 0 ? Math.round((withEmbeddings / total) * 100) : 0

      return {
        total,
        withEmbeddings,
        percentage,
        lastUpdate: row?.last_update || null
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:', error)
      return {
        total: 0,
        withEmbeddings: 0,
        percentage: 0,
        lastUpdate: null
      }
    }
  }
}
