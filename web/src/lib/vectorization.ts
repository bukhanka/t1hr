import { openai, MODELS } from './openai'
import { prisma } from './prisma'

/**
 * –°–µ—Ä–≤–∏—Å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
export class VectorizationService {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  static async buildProfileDocument(profileId: string): Promise<string | null> {
    const profile = await prisma.profile.findUnique({
      where: { id: profileId },
      include: {
        user: {
          select: { name: true }
        },
        userSkills: {
          include: { skill: true },
          where: { status: 'USING' }
        },
        userProjects: {
          include: { project: true },
          where: { achievements: { not: null } }
        },
        careerGoals: true
      }
    })

    if (!profile) {
      return null
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç
    const parts: string[] = []

    // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (profile.user.name) {
      parts.push(`–°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${profile.user.name}`)
    }

    if (profile.jobTitle) {
      parts.push(`–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${profile.jobTitle}`)
    }

    if (profile.department) {
      parts.push(`–û—Ç–¥–µ–ª: ${profile.department}`)
    }

    // –ù–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
    const skills = profile.userSkills.map(us => {
      const level = ['', '–ù–∞—á–∞–ª—å–Ω—ã–π', '–ë–∞–∑–æ–≤—ã–π', '–•–æ—Ä–æ—à–∏–π', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π'][us.level] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
      return `${us.skill.name} (${level} —É—Ä–æ–≤–µ–Ω—å)${us.isVerified ? ' - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∫–æ–ª–ª–µ–≥–∞–º–∏' : ''}`
    })

    if (skills.length > 0) {
      parts.push(`–ù–∞–≤—ã–∫–∏: ${skills.join(', ')}`)
    }

    // –ü—Ä–æ–µ–∫—Ç—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const projects = profile.userProjects.map(up => {
      return `–ü—Ä–æ–µ–∫—Ç "${up.project.name}": –≤—ã–ø–æ–ª–Ω—è–ª —Ä–æ–ª—å ${up.roleInProject}. –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${up.achievements}`
    })

    if (projects.length > 0) {
      parts.push(`–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ${projects.join('. ')}`)
    }

    // –ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏
    const goals = profile.careerGoals.map(cg => `${cg.goalType}: ${cg.target}`)
    if (goals.length > 0) {
      parts.push(`–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏: ${goals.join(', ')}`)
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    parts.push(`–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è: ${this.getLevelTitle(profile.level)}`)
    parts.push(`–°–∏–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è: ${profile.profileStrength}%`)

    return parts.join('. ')
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ SciBox API
   */
  static async generateEmbedding(text: string): Promise<number[] | null> {
    try {
      const embeddingResponse = await openai.embeddings.create({
        model: MODELS.EMBEDDINGS, // bge-m3
        input: text,
      })

      const embedding = embeddingResponse.data[0]?.embedding

      if (!embedding) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –æ—Ç SciBox API')
        return null
      }

      console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —ç–º–±–µ–¥–¥–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é ${embedding.length} –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`)
      
      return embedding

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ SciBox:', error)
      return null
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
   */
  static async updateProfileEmbedding(profileId: string): Promise<boolean> {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è
      const documentText = await this.buildProfileDocument(profileId)
      
      if (!documentText) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}`)
        return false
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
      const embedding = await this.generateEmbedding(documentText)
      
      if (!embedding) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}`)
        return false
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
      await prisma.profile.update({
        where: { id: profileId },
        data: {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä –∏ —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
      // embedding: `[${embedding.join(',')}]`, // TODO: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ pgvector –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      embeddingText: documentText.substring(0, 1000) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏
        }
      })

      console.log(`üéØ –≠–º–±–µ–¥–¥–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}`)
      return true

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}:`, error)
      return false
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (—Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞)
   */
  static async rebuildAllEmbeddings(): Promise<void> {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...')

    const profiles = await prisma.profile.findMany({
      where: {
        user: { role: 'EMPLOYEE' }
      },
      select: { id: true }
    })

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${profiles.length} –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`)

    let successful = 0
    let failed = 0

    for (const profile of profiles) {
      const success = await this.updateProfileEmbedding(profile.id)
      if (success) {
        successful++
      } else {
        failed++
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API
      await new Promise(resolve => setTimeout(resolve, 100))
    }

    console.log(`‚úÖ –ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${successful} —É—Å–ø–µ—à–Ω–æ, ${failed} –æ—à–∏–±–æ–∫`)
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º
   */
  static async semanticSearch(
    queryText: string, 
    limit: number = 10,
    threshold: number = 0.3
  ): Promise<Array<{
    profileId: string
    similarity: number
    profile: any
  }> | null> {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      const queryEmbedding = await this.generateEmbedding(queryText)
      
      if (!queryEmbedding) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞')
        return null
      }

      // TODO: –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤ PostgreSQL –∫–æ–≥–¥–∞ pgvector –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è
      // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
      console.log('üîÑ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback')
      return null
      
      // –ö–æ–¥ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–≥–¥–∞ pgvector –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è:
      /*
      const results = await prisma.$queryRaw<Array<{
        id: string
        similarity: number
      }>>`
        SELECT 
          id,
          1 - (embedding <=> ${`[${queryEmbedding.join(',')}]`}::vector) as similarity
        FROM "Profile"
        WHERE embedding IS NOT NULL
          AND (1 - (embedding <=> ${`[${queryEmbedding.join(',')}]`}::vector)) > ${threshold}
        ORDER BY similarity DESC
        LIMIT ${limit}
      `

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
      const profileIds = results.map(r => r.id)
      const profiles = await prisma.profile.findMany({
        where: { id: { in: profileIds } },
        include: {
          user: {
            select: { id: true, name: true, email: true }
          },
          userSkills: {
            include: { skill: true },
            where: { status: 'USING' }
          },
          userProjects: {
            include: { project: true },
            where: { achievements: { not: null } },
            take: 3
          }
        }
      })

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
      const enrichedResults = results.map(result => {
        const profile = profiles.find(p => p.id === result.id)
        return {
          profileId: result.id,
          similarity: result.similarity,
          profile
        }
      }).filter(r => r.profile)

      console.log(`üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ ${enrichedResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${queryText}"`)
      
      return enrichedResults
      */

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error)
      return null
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ –Ω–æ–º–µ—Ä—É
   */
  private static getLevelTitle(level: number): string {
    const levels = ['', 'Newcomer', 'Junior', 'Middle', 'Senior', 'Expert', 'Principal']
    return levels[level] || 'Unknown'
  }
}
