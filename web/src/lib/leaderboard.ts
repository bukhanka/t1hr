import { prisma } from './prisma'

export type LeaderboardType = 
  | 'tcoins_weekly'
  | 'tcoins_monthly' 
  | 'tcoins_alltime'
  | 'xp_weekly'
  | 'xp_monthly'
  | 'profile_strength'
  | 'activity_weekly'

export interface LeaderboardEntry {
  position: number
  profileId: string
  userId: string
  name: string
  score: number
  avatar?: string
  department?: string
  level?: number
  badge?: string
  change?: 'up' | 'down' | 'same' | null // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –ø—Ä–æ—à–ª–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
}

export interface LeaderboardData {
  type: LeaderboardType
  period: string
  entries: LeaderboardEntry[]
  totalParticipants: number
  generatedAt: Date
  validUntil: Date
}

export class LeaderboardService {
  
  // –ü–æ–ª—É—á–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
  static async getLeaderboard(type: LeaderboardType): Promise<LeaderboardData | null> {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = await prisma.leaderboard.findFirst({
      where: { 
        type,
        validUntil: { gt: new Date() } // –ï—â–µ –Ω–µ –∏—Å—Ç–µ–∫
      },
      orderBy: { generatedAt: 'desc' }
    })

    if (cached) {
      return {
        type: type,
        period: cached.period,
        entries: cached.data as unknown as LeaderboardEntry[],
        totalParticipants: (cached.data as unknown as LeaderboardEntry[]).length,
        generatedAt: cached.generatedAt,
        validUntil: cached.validUntil || new Date()
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    return await this.generateLeaderboard(type)
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
  static async generateLeaderboard(type: LeaderboardType): Promise<LeaderboardData | null> {
    try {
      let entries: LeaderboardEntry[] = []
      let period = 'all_time'
      let validUntil = new Date()
      
      switch (type) {
        case 'tcoins_weekly':
          entries = await this.generateTCoinsWeeklyLeaderboard()
          period = 'weekly'
          validUntil = this.getWeekEnd()
          break
          
        case 'tcoins_monthly':
          entries = await this.generateTCoinsMonthlyLeaderboard()
          period = 'monthly'
          validUntil = this.getMonthEnd()
          break
          
        case 'tcoins_alltime':
          entries = await this.generateTCoinsAllTimeLeaderboard()
          period = 'all_time'
          validUntil = new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 —á–∞—Å–∞
          break
          
        case 'xp_weekly':
          entries = await this.generateXPWeeklyLeaderboard()
          period = 'weekly'
          validUntil = this.getWeekEnd()
          break
          
        case 'xp_monthly':
          entries = await this.generateXPMonthlyLeaderboard()
          period = 'monthly'
          validUntil = this.getMonthEnd()
          break
          
        case 'profile_strength':
          entries = await this.generateProfileStrengthLeaderboard()
          period = 'all_time'
          validUntil = new Date(Date.now() + 12 * 60 * 60 * 1000) // 12 —á–∞—Å–æ–≤
          break
          
        case 'activity_weekly':
          entries = await this.generateActivityWeeklyLeaderboard()
          period = 'weekly'
          validUntil = this.getWeekEnd()
          break
          
        default:
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: ${type}`)
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      await prisma.leaderboard.create({
        data: {
          type,
          period,
          data: entries as any,
          generatedAt: new Date(),
          validUntil
        }
      })

      return {
        type,
        period,
        entries,
        totalParticipants: entries.length,
        generatedAt: new Date(),
        validUntil
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error)
      return null
    }
  }

  // T-Coins –∑–∞ –Ω–µ–¥–µ–ª—é
  private static async generateTCoinsWeeklyLeaderboard(): Promise<LeaderboardEntry[]> {
    const weekStart = this.getWeekStart()
    
    const results = await prisma.profile.findMany({
      where: {
        tcoinTransactions: {
          some: {
            createdAt: { gte: weekStart },
            type: 'earned'
          }
        }
      },
      include: {
        user: true,
        tcoinTransactions: {
          where: {
            createdAt: { gte: weekStart },
            type: 'earned'
          }
        }
      }
    })

    return results
      .map(profile => {
        const weeklyEarnings = profile.tcoinTransactions.reduce((sum, t) => sum + t.amount, 0)
        return {
          position: 0,
          profileId: profile.id,
          userId: profile.userId,
          name: profile.user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          score: weeklyEarnings,
          avatar: profile.user.image || undefined,
          department: profile.department || undefined,
          level: profile.level
        }
      })
      .filter(entry => entry.score > 0)
      .sort((a, b) => b.score - a.score)
      .map((entry, index) => ({ ...entry, position: index + 1 }))
      .slice(0, 50) // –¢–æ–ø-50
  }

  // T-Coins –∑–∞ –º–µ—Å—è—Ü
  private static async generateTCoinsMonthlyLeaderboard(): Promise<LeaderboardEntry[]> {
    const monthStart = this.getMonthStart()
    
    const results = await prisma.profile.findMany({
      where: {
        tcoinTransactions: {
          some: {
            createdAt: { gte: monthStart },
            type: 'earned'
          }
        }
      },
      include: {
        user: true,
        tcoinTransactions: {
          where: {
            createdAt: { gte: monthStart },
            type: 'earned'
          }
        }
      }
    })

    return results
      .map(profile => {
        const monthlyEarnings = profile.tcoinTransactions.reduce((sum, t) => sum + t.amount, 0)
        return {
          position: 0,
          profileId: profile.id,
          userId: profile.userId,
          name: profile.user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          score: monthlyEarnings,
          avatar: profile.user.image || undefined,
          department: profile.department || undefined,
          level: profile.level
        }
      })
      .filter(entry => entry.score > 0)
      .sort((a, b) => b.score - a.score)
      .map((entry, index) => ({ ...entry, position: index + 1 }))
      .slice(0, 100) // –¢–æ–ø-100
  }

  // –í—Å–µ T-Coins
  private static async generateTCoinsAllTimeLeaderboard(): Promise<LeaderboardEntry[]> {
    const results = await prisma.profile.findMany({
      where: {
        totalEarned: { gt: 0 }
      },
      include: {
        user: true
      }
    })

    return results
      .map(profile => ({
        position: 0,
        profileId: profile.id,
        userId: profile.userId,
        name: profile.user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        score: profile.totalEarned,
        avatar: profile.user.image || undefined,
        department: profile.department || undefined,
        level: profile.level
      }))
      .sort((a, b) => b.score - a.score)
      .map((entry, index) => ({ ...entry, position: index + 1 }))
      .slice(0, 100)
  }

  // XP –∑–∞ –Ω–µ–¥–µ–ª—é  
  private static async generateXPWeeklyLeaderboard(): Promise<LeaderboardEntry[]> {
    const weekStart = this.getWeekStart()
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞–ª–∏ XP –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π XP, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
    const results = await prisma.profile.findMany({
      where: {
        updatedAt: { gte: weekStart },
        xp: { gt: 0 }
      },
      include: {
        user: true
      },
      orderBy: { xp: 'desc' },
      take: 50
    })

    return results.map((profile, index) => ({
      position: index + 1,
      profileId: profile.id,
      userId: profile.userId,
      name: profile.user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      score: profile.xp, // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã XP –∑–∞ –Ω–µ–¥–µ–ª—é
      avatar: profile.user.image || undefined,
      department: profile.department || undefined,
      level: profile.level
    }))
  }

  // XP –∑–∞ –º–µ—Å—è—Ü
  private static async generateXPMonthlyLeaderboard(): Promise<LeaderboardEntry[]> {
    const monthStart = this.getMonthStart()
    
    const results = await prisma.profile.findMany({
      where: {
        updatedAt: { gte: monthStart },
        xp: { gt: 0 }
      },
      include: {
        user: true
      },
      orderBy: { xp: 'desc' },
      take: 100
    })

    return results.map((profile, index) => ({
      position: index + 1,
      profileId: profile.id,
      userId: profile.userId,
      name: profile.user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      score: profile.xp,
      avatar: profile.user.image || undefined,
      department: profile.department || undefined,
      level: profile.level
    }))
  }

  // –°–∏–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è
  private static async generateProfileStrengthLeaderboard(): Promise<LeaderboardEntry[]> {
    const results = await prisma.profile.findMany({
      where: {
        profileStrength: { gt: 0 }
      },
      include: {
        user: true
      },
      orderBy: { profileStrength: 'desc' },
      take: 50
    })

    return results.map((profile, index) => ({
      position: index + 1,
      profileId: profile.id,
      userId: profile.userId,
      name: profile.user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      score: profile.profileStrength,
      avatar: profile.user.image || undefined,
      department: profile.department || undefined,
      level: profile.level,
      badge: profile.profileStrength >= 90 ? 'üèÜ' : profile.profileStrength >= 70 ? 'ü•à' : profile.profileStrength >= 50 ? 'ü•â' : undefined
    }))
  }

  // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é
  private static async generateActivityWeeklyLeaderboard(): Promise<LeaderboardEntry[]> {
    const weekStart = this.getWeekStart()
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const results = await prisma.profile.findMany({
      where: {
        OR: [
          { updatedAt: { gte: weekStart } },
          { 
            tcoinTransactions: {
              some: { createdAt: { gte: weekStart } }
            }
          }
        ]
      },
      include: {
        user: true,
        tcoinTransactions: {
          where: { createdAt: { gte: weekStart } }
        }
      }
    })

    return results
      .map(profile => {
        // –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –∫–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π + –±–æ–Ω—É—Å –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        const activityScore = profile.tcoinTransactions.length + 
          (profile.updatedAt >= weekStart ? 5 : 0)
        
        return {
          position: 0,
          profileId: profile.id,
          userId: profile.userId,
          name: profile.user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          score: activityScore,
          avatar: profile.user.image || undefined,
          department: profile.department || undefined,
          level: profile.level
        }
      })
      .filter(entry => entry.score > 0)
      .sort((a, b) => b.score - a.score)
      .map((entry, index) => ({ ...entry, position: index + 1 }))
      .slice(0, 50)
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∞—Ç
  private static getWeekStart(): Date {
    const now = new Date()
    const day = now.getDay()
    const diff = now.getDate() - day + (day === 0 ? -6 : 1) // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    return new Date(now.setDate(diff))
  }

  private static getWeekEnd(): Date {
    const weekStart = this.getWeekStart()
    return new Date(weekStart.getTime() + 7 * 24 * 60 * 60 * 1000)
  }

  private static getMonthStart(): Date {
    const now = new Date()
    return new Date(now.getFullYear(), now.getMonth(), 1)
  }

  private static getMonthEnd(): Date {
    const now = new Date()
    return new Date(now.getFullYear(), now.getMonth() + 1, 0)
  }

  // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤
  static async cleanupExpiredLeaderboards(): Promise<void> {
    await prisma.leaderboard.deleteMany({
      where: {
        validUntil: { lt: new Date() }
      }
    })
  }
}
